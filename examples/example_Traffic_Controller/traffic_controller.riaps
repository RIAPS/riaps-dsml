package traffic_controller
 
import traffic_controller.include.messages.*
// RIAPS Sample
 
app traffic_controller {
	// Message types used in the app
    message iCDensityMsg: ICDensityMsg; 
    message gameLightStateMsg: GameLightStateMsg;
    message setLightReq: SetLightReq;
    message setLightRep: SetLightRep;
    message gameDensityMsg: GameDensityMsg;
    
	// Intersection Controller component. Should probably say what Ts is.
    component IC (parent="none"){
      timer clock 1000 s; 						// Periodic timer trigger to trigger density reading every 1 sec
      sub densityPort : gameDensityMsg;				// sub port for densityMsg messages 
      //sub lightPort : gameLightStateMsg;		// sub port for messages regarding the state of the traffic lights
      pub pubICPort : iCDensityMsg;
      //sub subICPort : ICDensityMsg;					// Subscriber port to receive density messages.
      //req setLightsPort : (setLightReq, setLightRep);
    }
    
    device LightIF(rate=10, gameServerIP="localhost", parent="none") {
    	inside trigger /* default */; 	// Inside port for triggering an op by a message coming from an internal thread.
      								// The 'default' is optional, it implies a 1 sec timer/ticker thread.
		timer clock 1000 s;  //Timer to get the light state after the value specified milliseconds.
 		pub lightPort : gameLightStateMsg;
 //   rep setLightsPort : (setLightReq, setLightRep);
    }
    
    device DensitySensor(rate=10, gameServerIP="localhost", parent="none") {
    	inside trigger /* default */; 	// Inside port for triggering an op by a message coming from an internal thread.
      								// The 'default' is optional, it implies a 1 sec timer/ticker thread.
    	timer clock 1000 s;  //Timer to get the density after the value specified milliseconds.
    	pub densityPort : gameDensityMsg;
    }
   
    
    // IC actor
    actor Actor0 {
       local gameDensityMsg, gameLightStateMsg, setLightReq, setLightRep;	// Local message types
       {
          ic : IC(parent="Actor0");						// Intersection Controller
          lIF : LightIF(rate=2, gameServerIP="192.168.0.107", parent="Actor0");			// Component interfacing with the game to get light state
          dsnsr : DensitySensor(rate=2, gameServerIP="192.168.0.107", parent="Actor0");		// Component interfacing with the game to get density
          
       }
    }
}