// testAppDSML.riaps

app TestAppDSML {

    message DataFrame; // data received from UART2
    message DataAck;   // writing message out UART2 (just to test writing capability)
    message MsgRequestLocal;
    message MsgReplyLocal;
    message msgRequest;
    message msgReply;
    message replyMsgReceived;
    message Msg1Data;
    message Measured;
    message average;
    message HelloMsg;

    library thirdPartyLibraryName;
    library TheLibrary;
    library modbus;
    
	// Weather Station device interface - UART2
    device WeatherReporter(port='ttyO1', baudrate=9600) {
        // Inside port for forwarding messages coming from an internal thread.
        // The 'default' is optional, it implies a 1 sec timer/ticker thread.
        inside dataIn_queue default; 	 // Receive data from UART1 and send to component
        inside dataOut_queue;  // Receive from component and write to UART1
      
        timer clock 2000 within 1 msec;
        pub reportedData : DataFrame ;	// Publish port for Weather Station data messages (data read from UART)
        sub listenerAck  : DataAck   ;    // Received Acknowledgement back from WeatherListener (write data to UART)
    }
    
    // Weather Listener component
    component WeatherListener() {
        sub weatherDataReady : DataFrame ;	
        pub weatherDataAck   : DataAck; 
        timer display 1000;
    }
    
    // Averager component
    component Averager(Ts=1.0) {
        pub thisReady : average;			// Publish port to publish node value update messages
        sub nodeReady : Measured;			// Subscriber port for node value update messages
        timer update 10 sec within 1 sec;		 
     }

    // Hello Component 
    component HelloComponent() {
        pub hello : HelloMsg;
    }

    // Node Local Requestor Component with a sporadic timer
    component RequestComponentLocal {
        timer sporadic;
        sub gatherData : Msg1Data timed within 10 sec;
        req aRequestLocal : (MsgRequestLocal, MsgReplyLocal);
    }

    // Node Local Reply Component
    component ReplyComponentLocal {
        timer checkreply 20 min within 1 min;
        rep aReplyLocal : (MsgRequestLocal, MsgReplyLocal);
    }

    // Across Node Requestor Component
    component RequestComponent {
        timer periodicReq 2000;
        pub replyReceived : replyMsgReceived timed;
        req aRemoteRequest : (msgRequest, msgReply) timed within 1 sec;
    }

    // Across Node Reply Component
    component ReplyComponent {
        timer checkreply 200 msec;
        rep aRemoteReply : (msgRequest, msgReply) timed within 2 msec;
    }

    // Client Component
    component ClientComponent {
        timer wakeup 2000;
        clt aClient : (msgRequest, msgReply) timed;
    }

    // Server Component
    component ServerComponent {
        timer checkreply 200 msec;
        srv aServer : (msgRequest, msgReply) timed within 2 msec;
    }

    // Query Component
    component QueryComponent {
        timer wakeup 2000;
        qry aQuery : (msgRequest, msgReply) timed within 1 sec;
    }

    // Answer Component
    component AnswerComponent {
        timer checkreply 200 msec;
        srv anAnswer : (msgRequest, msgReply) timed within 2 msec;
    }



    // Hello Actor - put on all nodes
    actor HelloActor() {
        {
            nodeHello : HelloComponent;
        }
    }

    // RemoteWeatherStation1 actor - actor sets the parameter values
    actor RemoteWeatherStationActor1() {
       local DataFrame, DataAck;	// Local message types
       {
       	  reporter : WeatherReporter(port='ttyO2', baudrate=115200);
          listener : WeatherListener(); 		
       }
    }

   // RemoteWeatherStation2 actor - component sets the parameter values
    actor RemoteWeatherStationActor2() {
       local DataFrame, DataAck;	// Local message types
       {
       	  reporter : WeatherReporter();
          listener : WeatherListener(); 		
       }
    } 

    // Averager actor - component sets default parameter value, actor supersedes with another default, and deplo will set final value
    actor Averager(Ts=0.9.18) {
       {
          averager : Averager(Ts=Ts); 		
       }
    }

    actor LocalReqRepActor() {
        local MsgRequestLocal, MsgReplyLocal;
        {
            aRequest1 : RequestComponentLocal();
            aReply1   : ReplyComponentLocal();
        }
    }

    actor AcrossActorRequestActor() {  // but message stays on node (so both actors are on same node)
        local msgRequest, msgReply;
        uses {
            cpu max 10 % over 1;  // CPU limit (1 msec)
            mem 200 mb;           // Memory limit
            net rate 10 kbps;     // Network bandwidth limits
        }
        {
            aRequest2 : RequestComponent();
        }

    }

    actor AcrossActorReqlyActor() {  // but message stays on node (so both actors are on same node)
        local msgRequest, msgReply;
        uses {
            cpu 10 % over 1 msec;  // CPU limit 
            mem 200 kb;           // Memory limit
            net rate 10 mbps ceil 12 mbps; // Network bandwidth limits
        }
        {
            aReply2   : ReplyComponent();
        }

    }

     actor AcrossNodesRequestActor() {  
        uses {
            cpu max 10 % over 1 sec;  // CPU limit 
            mem 200 gb;           // Memory limit
            net rate 10 kbps ceil 12 kbps; // Network bandwidth limits
        }
        {
            aRequest2 : RequestComponent();
        }

    }

    actor AcrossNodesReqlyActor() {  
        uses {
            cpu 10 % over 1 min;  // CPU limit (1 msec)
            space 10 gb;          // File space limit
            net rate 10 kbps burst 1.2 k; // Network bandwidth limits
        }
        {
            aReply2   : ReplyComponent();
        }

    }

    actor ClientActor() {  
        uses {
            cpu 10 %;             // CPU limit 
            space 10 mb;          // File space limit
            net rate 10 kbps burst 1.2 kb; // Network bandwidth limits
        }
        {
            aClientActor : ClientComponent();
        }

    }

    actor ServerActor() {  
        uses {
            net rate 10 kbps ceil 12 kbps burst 1.2 k; // Network bandwidth limits
        }
        {
            aServerActor   : ServerComponent();
        }
    }

     actor QueryActor() {  
        {
            aQueryActor : QueryComponent();
        }

    }

    actor AnswerActor() {  
        {
            anAnswerActor   : AnswerComponent();
        }
    }

}
