import WeatherMonitor.include.datatypes.*
struct TempData 
{ 
	temperature:Double
	measure:Second
	entries: Entry
}    
struct Second{
	value:Int32   
}
enumeration Entry{
	fIRST
	sECOND
}
message TempData: TempData;
message TempInternal: TempData;
device Thermostat(a=1)  
{ 
// Defines a 'thermostat' device type
	uses 
	{
		// Resources the device component uses
		cpu 25 % over 10 us;       // CPU at 25% over a 10 second interval
		io "UART"; // I/O protocol
		library libhome.so;
		file "1xt.f"
	}
// One publisher port for tempInternal messages,
// with data rate limits: no lower limit, 10 message/sec 
	pub p1: TempInternal [-,10];
	
}

app WeatherMonitor2
{
	// TempSensor component 
	rt component TempSensor
	{
		timer clock 5000;
		uses
		{
			device Thermostat (a =1);
			library libmath.so 
			cpu 10%  
			library libam.so
			file 'config.ini'
			file 'second.txt'
		    net 25 MB over 10 us;
		}
		
	    // Publish port for Temperature messages ; No lower limit. But a max limit
	    pub ready : TempData  [-,10]; 
	    sub rawtemp: TempInternal  [-,10]
	    
	    
	}
	// TempMonitor component
	component TempMonitor()
	{
		// Subscriber port to trigger component with Temperature messages
		sub tempupdate : TempData;
	}
	// WeatherIndicator actor
	actor WeatherIndicator()
	{
		{
			// TempSensor publishes 'TempData' messages
			sensor : TempSensor;
		}
		uses
		{
			mem 512 MB;
			space 1024 MB;
			 // this specifies that any component in this actor will 
			 // require a node that has a device of type thermostat and tag north.
			device Thermostat tag north;
		}
	}
	actor WeatherReceiver()
	{
		{
			// TempMonitor subscribes to 'TempData' messages
			monitor : TempMonitor;
		}
	}
}

app WeatherMonitor
{
	// TempSensor component 
	rt component TempSensor
	{
		timer clock 5000;
		uses
		{
			device Thermostat (a =1);
			library libmath.so 
			cpu 10%  
			library libam.so
			file 'config.ini'
			file 'second.txt'
		    net 25 MB over 10 us;
		}
		
	    // Publish port for Temperature messages ; No lower limit. But a max limit
	    pub ready : TempData  [-,10]; 
	    sub rawtemp: TempInternal  [-,10]
	    
	    
	}
	// TempMonitor component
	component TempMonitor()
	{
		// Subscriber port to trigger component with Temperature messages
		sub tempupdate : TempData;
	}
	// WeatherIndicator actor
	actor WeatherIndicator()
	{
		{
			// TempSensor publishes 'TempData' messages
			sensor : TempSensor;
		}
		uses
		{
			mem 512 MB;
			space 1024 MB;
			 // this specifies that any component in this actor will 
			 // require a node that has a device of type thermostat and tag north.
			device Thermostat tag north;
		}
	}
	actor WeatherReceiver()
	{
		{
			// TempMonitor subscribes to 'TempData' messages
			monitor : TempMonitor;
		}
	}
}
