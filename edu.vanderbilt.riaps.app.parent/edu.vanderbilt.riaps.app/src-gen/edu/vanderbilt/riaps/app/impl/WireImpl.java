/**
 * generated by Xtext 2.10.0
 */
package edu.vanderbilt.riaps.app.impl;

import edu.vanderbilt.riaps.app.AppPackage;
import edu.vanderbilt.riaps.app.ClntPort;
import edu.vanderbilt.riaps.app.ReqPort;
import edu.vanderbilt.riaps.app.SrvPort;
import edu.vanderbilt.riaps.app.Wire;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Wire</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.vanderbilt.riaps.app.impl.WireImpl#getClnt <em>Clnt</em>}</li>
 *   <li>{@link edu.vanderbilt.riaps.app.impl.WireImpl#getServer <em>Server</em>}</li>
 *   <li>{@link edu.vanderbilt.riaps.app.impl.WireImpl#isAmi <em>Ami</em>}</li>
 *   <li>{@link edu.vanderbilt.riaps.app.impl.WireImpl#getReq <em>Req</em>}</li>
 * </ul>
 *
 * @generated
 */
public class WireImpl extends MinimalEObjectImpl.Container implements Wire
{
  /**
   * The cached value of the '{@link #getClnt() <em>Clnt</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getClnt()
   * @generated
   * @ordered
   */
  protected ClntPort clnt;

  /**
   * The cached value of the '{@link #getServer() <em>Server</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getServer()
   * @generated
   * @ordered
   */
  protected SrvPort server;

  /**
   * The default value of the '{@link #isAmi() <em>Ami</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAmi()
   * @generated
   * @ordered
   */
  protected static final boolean AMI_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAmi() <em>Ami</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAmi()
   * @generated
   * @ordered
   */
  protected boolean ami = AMI_EDEFAULT;

  /**
   * The cached value of the '{@link #getReq() <em>Req</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReq()
   * @generated
   * @ordered
   */
  protected ReqPort req;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WireImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AppPackage.Literals.WIRE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClntPort getClnt()
  {
    if (clnt != null && clnt.eIsProxy())
    {
      InternalEObject oldClnt = (InternalEObject)clnt;
      clnt = (ClntPort)eResolveProxy(oldClnt);
      if (clnt != oldClnt)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AppPackage.WIRE__CLNT, oldClnt, clnt));
      }
    }
    return clnt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClntPort basicGetClnt()
  {
    return clnt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setClnt(ClntPort newClnt)
  {
    ClntPort oldClnt = clnt;
    clnt = newClnt;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AppPackage.WIRE__CLNT, oldClnt, clnt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SrvPort getServer()
  {
    if (server != null && server.eIsProxy())
    {
      InternalEObject oldServer = (InternalEObject)server;
      server = (SrvPort)eResolveProxy(oldServer);
      if (server != oldServer)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AppPackage.WIRE__SERVER, oldServer, server));
      }
    }
    return server;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SrvPort basicGetServer()
  {
    return server;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setServer(SrvPort newServer)
  {
    SrvPort oldServer = server;
    server = newServer;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AppPackage.WIRE__SERVER, oldServer, server));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isAmi()
  {
    return ami;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAmi(boolean newAmi)
  {
    boolean oldAmi = ami;
    ami = newAmi;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AppPackage.WIRE__AMI, oldAmi, ami));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReqPort getReq()
  {
    if (req != null && req.eIsProxy())
    {
      InternalEObject oldReq = (InternalEObject)req;
      req = (ReqPort)eResolveProxy(oldReq);
      if (req != oldReq)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AppPackage.WIRE__REQ, oldReq, req));
      }
    }
    return req;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReqPort basicGetReq()
  {
    return req;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setReq(ReqPort newReq)
  {
    ReqPort oldReq = req;
    req = newReq;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AppPackage.WIRE__REQ, oldReq, req));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AppPackage.WIRE__CLNT:
        if (resolve) return getClnt();
        return basicGetClnt();
      case AppPackage.WIRE__SERVER:
        if (resolve) return getServer();
        return basicGetServer();
      case AppPackage.WIRE__AMI:
        return isAmi();
      case AppPackage.WIRE__REQ:
        if (resolve) return getReq();
        return basicGetReq();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AppPackage.WIRE__CLNT:
        setClnt((ClntPort)newValue);
        return;
      case AppPackage.WIRE__SERVER:
        setServer((SrvPort)newValue);
        return;
      case AppPackage.WIRE__AMI:
        setAmi((Boolean)newValue);
        return;
      case AppPackage.WIRE__REQ:
        setReq((ReqPort)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AppPackage.WIRE__CLNT:
        setClnt((ClntPort)null);
        return;
      case AppPackage.WIRE__SERVER:
        setServer((SrvPort)null);
        return;
      case AppPackage.WIRE__AMI:
        setAmi(AMI_EDEFAULT);
        return;
      case AppPackage.WIRE__REQ:
        setReq((ReqPort)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AppPackage.WIRE__CLNT:
        return clnt != null;
      case AppPackage.WIRE__SERVER:
        return server != null;
      case AppPackage.WIRE__AMI:
        return ami != AMI_EDEFAULT;
      case AppPackage.WIRE__REQ:
        return req != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (ami: ");
    result.append(ami);
    result.append(')');
    return result.toString();
  }

} //WireImpl
