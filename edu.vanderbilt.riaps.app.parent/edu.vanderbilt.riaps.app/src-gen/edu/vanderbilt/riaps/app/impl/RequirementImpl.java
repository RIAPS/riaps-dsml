/**
 * generated by Xtext 2.10.0
 */
package edu.vanderbilt.riaps.app.impl;

import edu.vanderbilt.riaps.app.AppPackage;
import edu.vanderbilt.riaps.app.Artifact;
import edu.vanderbilt.riaps.app.MemoryUnits;
import edu.vanderbilt.riaps.app.Requirement;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Requirement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.vanderbilt.riaps.app.impl.RequirementImpl#getArtifactrequirement <em>Artifactrequirement</em>}</li>
 *   <li>{@link edu.vanderbilt.riaps.app.impl.RequirementImpl#getMemoryRequirement <em>Memory Requirement</em>}</li>
 *   <li>{@link edu.vanderbilt.riaps.app.impl.RequirementImpl#getMemoryunit <em>Memoryunit</em>}</li>
 *   <li>{@link edu.vanderbilt.riaps.app.impl.RequirementImpl#getStorageRequirement <em>Storage Requirement</em>}</li>
 *   <li>{@link edu.vanderbilt.riaps.app.impl.RequirementImpl#getStorageunit <em>Storageunit</em>}</li>
 *   <li>{@link edu.vanderbilt.riaps.app.impl.RequirementImpl#getDeviceRequirement <em>Device Requirement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RequirementImpl extends MinimalEObjectImpl.Container implements Requirement
{
  /**
   * The cached value of the '{@link #getArtifactrequirement() <em>Artifactrequirement</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArtifactrequirement()
   * @generated
   * @ordered
   */
  protected Artifact artifactrequirement;

  /**
   * The default value of the '{@link #getMemoryRequirement() <em>Memory Requirement</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMemoryRequirement()
   * @generated
   * @ordered
   */
  protected static final int MEMORY_REQUIREMENT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getMemoryRequirement() <em>Memory Requirement</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMemoryRequirement()
   * @generated
   * @ordered
   */
  protected int memoryRequirement = MEMORY_REQUIREMENT_EDEFAULT;

  /**
   * The cached value of the '{@link #getMemoryunit() <em>Memoryunit</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMemoryunit()
   * @generated
   * @ordered
   */
  protected MemoryUnits memoryunit;

  /**
   * The default value of the '{@link #getStorageRequirement() <em>Storage Requirement</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStorageRequirement()
   * @generated
   * @ordered
   */
  protected static final int STORAGE_REQUIREMENT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getStorageRequirement() <em>Storage Requirement</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStorageRequirement()
   * @generated
   * @ordered
   */
  protected int storageRequirement = STORAGE_REQUIREMENT_EDEFAULT;

  /**
   * The cached value of the '{@link #getStorageunit() <em>Storageunit</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStorageunit()
   * @generated
   * @ordered
   */
  protected MemoryUnits storageunit;

  /**
   * The default value of the '{@link #getDeviceRequirement() <em>Device Requirement</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeviceRequirement()
   * @generated
   * @ordered
   */
  protected static final String DEVICE_REQUIREMENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDeviceRequirement() <em>Device Requirement</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeviceRequirement()
   * @generated
   * @ordered
   */
  protected String deviceRequirement = DEVICE_REQUIREMENT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RequirementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AppPackage.Literals.REQUIREMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Artifact getArtifactrequirement()
  {
    if (artifactrequirement != null && artifactrequirement.eIsProxy())
    {
      InternalEObject oldArtifactrequirement = (InternalEObject)artifactrequirement;
      artifactrequirement = (Artifact)eResolveProxy(oldArtifactrequirement);
      if (artifactrequirement != oldArtifactrequirement)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AppPackage.REQUIREMENT__ARTIFACTREQUIREMENT, oldArtifactrequirement, artifactrequirement));
      }
    }
    return artifactrequirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Artifact basicGetArtifactrequirement()
  {
    return artifactrequirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setArtifactrequirement(Artifact newArtifactrequirement)
  {
    Artifact oldArtifactrequirement = artifactrequirement;
    artifactrequirement = newArtifactrequirement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AppPackage.REQUIREMENT__ARTIFACTREQUIREMENT, oldArtifactrequirement, artifactrequirement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getMemoryRequirement()
  {
    return memoryRequirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMemoryRequirement(int newMemoryRequirement)
  {
    int oldMemoryRequirement = memoryRequirement;
    memoryRequirement = newMemoryRequirement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AppPackage.REQUIREMENT__MEMORY_REQUIREMENT, oldMemoryRequirement, memoryRequirement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MemoryUnits getMemoryunit()
  {
    return memoryunit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMemoryunit(MemoryUnits newMemoryunit, NotificationChain msgs)
  {
    MemoryUnits oldMemoryunit = memoryunit;
    memoryunit = newMemoryunit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AppPackage.REQUIREMENT__MEMORYUNIT, oldMemoryunit, newMemoryunit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMemoryunit(MemoryUnits newMemoryunit)
  {
    if (newMemoryunit != memoryunit)
    {
      NotificationChain msgs = null;
      if (memoryunit != null)
        msgs = ((InternalEObject)memoryunit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AppPackage.REQUIREMENT__MEMORYUNIT, null, msgs);
      if (newMemoryunit != null)
        msgs = ((InternalEObject)newMemoryunit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AppPackage.REQUIREMENT__MEMORYUNIT, null, msgs);
      msgs = basicSetMemoryunit(newMemoryunit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AppPackage.REQUIREMENT__MEMORYUNIT, newMemoryunit, newMemoryunit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getStorageRequirement()
  {
    return storageRequirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStorageRequirement(int newStorageRequirement)
  {
    int oldStorageRequirement = storageRequirement;
    storageRequirement = newStorageRequirement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AppPackage.REQUIREMENT__STORAGE_REQUIREMENT, oldStorageRequirement, storageRequirement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MemoryUnits getStorageunit()
  {
    return storageunit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStorageunit(MemoryUnits newStorageunit, NotificationChain msgs)
  {
    MemoryUnits oldStorageunit = storageunit;
    storageunit = newStorageunit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AppPackage.REQUIREMENT__STORAGEUNIT, oldStorageunit, newStorageunit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStorageunit(MemoryUnits newStorageunit)
  {
    if (newStorageunit != storageunit)
    {
      NotificationChain msgs = null;
      if (storageunit != null)
        msgs = ((InternalEObject)storageunit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AppPackage.REQUIREMENT__STORAGEUNIT, null, msgs);
      if (newStorageunit != null)
        msgs = ((InternalEObject)newStorageunit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AppPackage.REQUIREMENT__STORAGEUNIT, null, msgs);
      msgs = basicSetStorageunit(newStorageunit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AppPackage.REQUIREMENT__STORAGEUNIT, newStorageunit, newStorageunit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDeviceRequirement()
  {
    return deviceRequirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDeviceRequirement(String newDeviceRequirement)
  {
    String oldDeviceRequirement = deviceRequirement;
    deviceRequirement = newDeviceRequirement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AppPackage.REQUIREMENT__DEVICE_REQUIREMENT, oldDeviceRequirement, deviceRequirement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AppPackage.REQUIREMENT__MEMORYUNIT:
        return basicSetMemoryunit(null, msgs);
      case AppPackage.REQUIREMENT__STORAGEUNIT:
        return basicSetStorageunit(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AppPackage.REQUIREMENT__ARTIFACTREQUIREMENT:
        if (resolve) return getArtifactrequirement();
        return basicGetArtifactrequirement();
      case AppPackage.REQUIREMENT__MEMORY_REQUIREMENT:
        return getMemoryRequirement();
      case AppPackage.REQUIREMENT__MEMORYUNIT:
        return getMemoryunit();
      case AppPackage.REQUIREMENT__STORAGE_REQUIREMENT:
        return getStorageRequirement();
      case AppPackage.REQUIREMENT__STORAGEUNIT:
        return getStorageunit();
      case AppPackage.REQUIREMENT__DEVICE_REQUIREMENT:
        return getDeviceRequirement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AppPackage.REQUIREMENT__ARTIFACTREQUIREMENT:
        setArtifactrequirement((Artifact)newValue);
        return;
      case AppPackage.REQUIREMENT__MEMORY_REQUIREMENT:
        setMemoryRequirement((Integer)newValue);
        return;
      case AppPackage.REQUIREMENT__MEMORYUNIT:
        setMemoryunit((MemoryUnits)newValue);
        return;
      case AppPackage.REQUIREMENT__STORAGE_REQUIREMENT:
        setStorageRequirement((Integer)newValue);
        return;
      case AppPackage.REQUIREMENT__STORAGEUNIT:
        setStorageunit((MemoryUnits)newValue);
        return;
      case AppPackage.REQUIREMENT__DEVICE_REQUIREMENT:
        setDeviceRequirement((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AppPackage.REQUIREMENT__ARTIFACTREQUIREMENT:
        setArtifactrequirement((Artifact)null);
        return;
      case AppPackage.REQUIREMENT__MEMORY_REQUIREMENT:
        setMemoryRequirement(MEMORY_REQUIREMENT_EDEFAULT);
        return;
      case AppPackage.REQUIREMENT__MEMORYUNIT:
        setMemoryunit((MemoryUnits)null);
        return;
      case AppPackage.REQUIREMENT__STORAGE_REQUIREMENT:
        setStorageRequirement(STORAGE_REQUIREMENT_EDEFAULT);
        return;
      case AppPackage.REQUIREMENT__STORAGEUNIT:
        setStorageunit((MemoryUnits)null);
        return;
      case AppPackage.REQUIREMENT__DEVICE_REQUIREMENT:
        setDeviceRequirement(DEVICE_REQUIREMENT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AppPackage.REQUIREMENT__ARTIFACTREQUIREMENT:
        return artifactrequirement != null;
      case AppPackage.REQUIREMENT__MEMORY_REQUIREMENT:
        return memoryRequirement != MEMORY_REQUIREMENT_EDEFAULT;
      case AppPackage.REQUIREMENT__MEMORYUNIT:
        return memoryunit != null;
      case AppPackage.REQUIREMENT__STORAGE_REQUIREMENT:
        return storageRequirement != STORAGE_REQUIREMENT_EDEFAULT;
      case AppPackage.REQUIREMENT__STORAGEUNIT:
        return storageunit != null;
      case AppPackage.REQUIREMENT__DEVICE_REQUIREMENT:
        return DEVICE_REQUIREMENT_EDEFAULT == null ? deviceRequirement != null : !DEVICE_REQUIREMENT_EDEFAULT.equals(deviceRequirement);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (memoryRequirement: ");
    result.append(memoryRequirement);
    result.append(", storageRequirement: ");
    result.append(storageRequirement);
    result.append(", deviceRequirement: ");
    result.append(deviceRequirement);
    result.append(')');
    return result.toString();
  }

} //RequirementImpl
