/**
 * generated by Xtext 2.10.0
 */
package edu.vanderbilt.riaps.app.impl;

import edu.vanderbilt.riaps.app.Actual;
import edu.vanderbilt.riaps.app.ActualValue;
import edu.vanderbilt.riaps.app.AppPackage;
import edu.vanderbilt.riaps.app.ComponentFormal;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Actual</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link edu.vanderbilt.riaps.app.impl.ActualImpl#getArgName <em>Arg Name</em>}</li>
 *   <li>{@link edu.vanderbilt.riaps.app.impl.ActualImpl#getArgValue <em>Arg Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ActualImpl extends MinimalEObjectImpl.Container implements Actual
{
  /**
   * The cached value of the '{@link #getArgName() <em>Arg Name</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgName()
   * @generated
   * @ordered
   */
  protected ComponentFormal argName;

  /**
   * The cached value of the '{@link #getArgValue() <em>Arg Value</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgValue()
   * @generated
   * @ordered
   */
  protected ActualValue argValue;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActualImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AppPackage.Literals.ACTUAL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComponentFormal getArgName()
  {
    if (argName != null && argName.eIsProxy())
    {
      InternalEObject oldArgName = (InternalEObject)argName;
      argName = (ComponentFormal)eResolveProxy(oldArgName);
      if (argName != oldArgName)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, AppPackage.ACTUAL__ARG_NAME, oldArgName, argName));
      }
    }
    return argName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComponentFormal basicGetArgName()
  {
    return argName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setArgName(ComponentFormal newArgName)
  {
    ComponentFormal oldArgName = argName;
    argName = newArgName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AppPackage.ACTUAL__ARG_NAME, oldArgName, argName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ActualValue getArgValue()
  {
    return argValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArgValue(ActualValue newArgValue, NotificationChain msgs)
  {
    ActualValue oldArgValue = argValue;
    argValue = newArgValue;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AppPackage.ACTUAL__ARG_VALUE, oldArgValue, newArgValue);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setArgValue(ActualValue newArgValue)
  {
    if (newArgValue != argValue)
    {
      NotificationChain msgs = null;
      if (argValue != null)
        msgs = ((InternalEObject)argValue).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AppPackage.ACTUAL__ARG_VALUE, null, msgs);
      if (newArgValue != null)
        msgs = ((InternalEObject)newArgValue).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AppPackage.ACTUAL__ARG_VALUE, null, msgs);
      msgs = basicSetArgValue(newArgValue, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AppPackage.ACTUAL__ARG_VALUE, newArgValue, newArgValue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AppPackage.ACTUAL__ARG_VALUE:
        return basicSetArgValue(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AppPackage.ACTUAL__ARG_NAME:
        if (resolve) return getArgName();
        return basicGetArgName();
      case AppPackage.ACTUAL__ARG_VALUE:
        return getArgValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AppPackage.ACTUAL__ARG_NAME:
        setArgName((ComponentFormal)newValue);
        return;
      case AppPackage.ACTUAL__ARG_VALUE:
        setArgValue((ActualValue)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AppPackage.ACTUAL__ARG_NAME:
        setArgName((ComponentFormal)null);
        return;
      case AppPackage.ACTUAL__ARG_VALUE:
        setArgValue((ActualValue)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AppPackage.ACTUAL__ARG_NAME:
        return argName != null;
      case AppPackage.ACTUAL__ARG_VALUE:
        return argValue != null;
    }
    return super.eIsSet(featureID);
  }

} //ActualImpl
