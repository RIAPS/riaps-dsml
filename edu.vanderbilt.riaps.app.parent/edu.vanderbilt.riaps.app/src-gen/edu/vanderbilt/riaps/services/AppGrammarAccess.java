/*
 * generated by Xtext 2.10.0
 */
package edu.vanderbilt.riaps.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AppGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameFQNParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cCollectionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCollectionsCollectionParserRuleCall_4_0 = (RuleCall)cCollectionsAssignment_4.eContents().get(0);
		
		////This is the main model rule
		//Model Mdodel:
		//	{Model}
		//	'package' name=FQN
		//	imports+=Import*
		//	collections+=Collection*
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} 'package' name=FQN imports+=Import* collections+=Collection*
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//'package'
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }
		
		//name=FQN
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_2_0() { return cNameFQNParserRuleCall_2_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }
		
		//collections+=Collection*
		public Assignment getCollectionsAssignment_4() { return cCollectionsAssignment_4; }
		
		//Collection
		public RuleCall getCollectionsCollectionParserRuleCall_4_0() { return cCollectionsCollectionParserRuleCall_4_0; }
	}
	public class FormalDefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.FormalDefault");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringDefaultParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberDefaultParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoolDefaultParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FormalDefault:
		//	StringDefault
		//	| NumberDefault
		//	| BoolDefault;
		@Override public ParserRule getRule() { return rule; }
		
		//StringDefault | NumberDefault | BoolDefault
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StringDefault
		public RuleCall getStringDefaultParserRuleCall_0() { return cStringDefaultParserRuleCall_0; }
		
		//NumberDefault
		public RuleCall getNumberDefaultParserRuleCall_1() { return cNumberDefaultParserRuleCall_1; }
		
		//BoolDefault
		public RuleCall getBoolDefaultParserRuleCall_2() { return cBoolDefaultParserRuleCall_2; }
	}
	public class StringDefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.StringDefault");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringDefault:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class NumberDefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.NumberDefault");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberDefault:
		//	value=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//value=Number
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//Number
		public RuleCall getValueNumberParserRuleCall_0() { return cValueNumberParserRuleCall_0; }
	}
	public class BoolDefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.BoolDefault");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BoolDefault:
		//	value=BOOL;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BOOL
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BOOL
		public RuleCall getValueBOOLTerminalRuleCall_0() { return cValueBOOLTerminalRuleCall_0; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cDECIMALTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cDECIMALTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		
		//Number hidden():
		//	(INT | DECIMAL) ('.' (INT | DECIMAL))?;
		@Override public ParserRule getRule() { return rule; }
		
		//(INT | DECIMAL) ('.' (INT | DECIMAL))?
		public Group getGroup() { return cGroup; }
		
		//(INT | DECIMAL)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }
		
		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_0_1() { return cDECIMALTerminalRuleCall_0_1; }
		
		//('.' (INT | DECIMAL))?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//(INT | DECIMAL)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1_0() { return cINTTerminalRuleCall_1_1_0; }
		
		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_1_1_1() { return cDECIMALTerminalRuleCall_1_1_1; }
	}
	public class CollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.Collection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMessageCollectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComponentCollectionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cApplicationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// These are the real FCO
		//Collection:
		//	MessageCollection
		//	| ComponentCollection
		//	| Application;
		@Override public ParserRule getRule() { return rule; }
		
		//MessageCollection | ComponentCollection | Application
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MessageCollection
		public RuleCall getMessageCollectionParserRuleCall_0() { return cMessageCollectionParserRuleCall_0; }
		
		//ComponentCollection
		public RuleCall getComponentCollectionParserRuleCall_1() { return cComponentCollectionParserRuleCall_1; }
		
		//Application
		public RuleCall getApplicationParserRuleCall_2() { return cApplicationParserRuleCall_2; }
	}
	public class ComponentCollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.ComponentCollection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cComponentCollectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cComponentCollectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cComponentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cComponentsComponentParserRuleCall_4_0 = (RuleCall)cComponentsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ComponentCollection:
		//	{ComponentCollection}
		//	'componentCollection' name=ID '{'
		//	components+=Component*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ComponentCollection} 'componentCollection' name=ID '{' components+=Component* '}'
		public Group getGroup() { return cGroup; }
		
		//{ComponentCollection}
		public Action getComponentCollectionAction_0() { return cComponentCollectionAction_0; }
		
		//'componentCollection'
		public Keyword getComponentCollectionKeyword_1() { return cComponentCollectionKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//components+=Component*
		public Assignment getComponentsAssignment_4() { return cComponentsAssignment_4; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_4_0() { return cComponentsComponentParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.Application");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cApplicationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cApplicationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBaseappAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cBaseappApplicationCrossReference_3_1_0 = (CrossReference)cBaseappAssignment_3_1.eContents().get(0);
		private final RuleCall cBaseappApplicationFQNParserRuleCall_3_1_0_1 = (RuleCall)cBaseappApplicationCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cArtifactsAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cArtifactsArtifactParserRuleCall_5_0_0 = (RuleCall)cArtifactsAssignment_5_0.eContents().get(0);
		private final Assignment cActorsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cActorsActorParserRuleCall_5_1_0 = (RuleCall)cActorsAssignment_5_1.eContents().get(0);
		private final Assignment cComponentsAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cComponentsComponentParserRuleCall_5_2_0 = (RuleCall)cComponentsAssignment_5_2.eContents().get(0);
		private final Assignment cMessagesAssignment_5_3 = (Assignment)cAlternatives_5.eContents().get(3);
		private final RuleCall cMessagesMessageParserRuleCall_5_3_0 = (RuleCall)cMessagesAssignment_5_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Application:
		//	{Application}
		//	'application' name=ID ('extends' baseapp=[Application|FQN])?
		//	'{' (artifacts+=Artifact | actors+=Actor | components+=Component | messages+=Message)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Application} 'application' name=ID ('extends' baseapp=[Application|FQN])? '{' (artifacts+=Artifact | actors+=Actor |
		//components+=Component | messages+=Message)* '}'
		public Group getGroup() { return cGroup; }
		
		//{Application}
		public Action getApplicationAction_0() { return cApplicationAction_0; }
		
		//'application'
		public Keyword getApplicationKeyword_1() { return cApplicationKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('extends' baseapp=[Application|FQN])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//baseapp=[Application|FQN]
		public Assignment getBaseappAssignment_3_1() { return cBaseappAssignment_3_1; }
		
		//[Application|FQN]
		public CrossReference getBaseappApplicationCrossReference_3_1_0() { return cBaseappApplicationCrossReference_3_1_0; }
		
		//FQN
		public RuleCall getBaseappApplicationFQNParserRuleCall_3_1_0_1() { return cBaseappApplicationFQNParserRuleCall_3_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(artifacts+=Artifact | actors+=Actor | components+=Component | messages+=Message)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//artifacts+=Artifact
		public Assignment getArtifactsAssignment_5_0() { return cArtifactsAssignment_5_0; }
		
		//Artifact
		public RuleCall getArtifactsArtifactParserRuleCall_5_0_0() { return cArtifactsArtifactParserRuleCall_5_0_0; }
		
		//actors+=Actor
		public Assignment getActorsAssignment_5_1() { return cActorsAssignment_5_1; }
		
		//Actor
		public RuleCall getActorsActorParserRuleCall_5_1_0() { return cActorsActorParserRuleCall_5_1_0; }
		
		//components+=Component
		public Assignment getComponentsAssignment_5_2() { return cComponentsAssignment_5_2; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_5_2_0() { return cComponentsComponentParserRuleCall_5_2_0; }
		
		//messages+=Message
		public Assignment getMessagesAssignment_5_3() { return cMessagesAssignment_5_3; }
		
		//Message
		public RuleCall getMessagesMessageParserRuleCall_5_3_0() { return cMessagesMessageParserRuleCall_5_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceImportedFQNParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' importedNamespace=ImportedFQN;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=ImportedFQN
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=ImportedFQN
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//ImportedFQN
		public RuleCall getImportedNamespaceImportedFQNParserRuleCall_1_0() { return cImportedNamespaceImportedFQNParserRuleCall_1_0; }
	}
	public class ImportedFQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.ImportedFQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFQNParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ImportedFQN:
		//	FQN ('.' '*')?;
		@Override public ParserRule getRule() { return rule; }
		
		//FQN ('.' '*')?
		public Group getGroup() { return cGroup; }
		
		//FQN
		public RuleCall getFQNParserRuleCall_0() { return cFQNParserRuleCall_0; }
		
		//('.' '*')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class MessageCollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.MessageCollection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMessageCollectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMessageCollectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMessagesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMessagesMessageParserRuleCall_4_0 = (RuleCall)cMessagesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////Now this is the real section of component description
		//MessageCollection:
		//	{MessageCollection}
		//	'messageCollection' name=ID '{'
		//	messages+=Message*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{MessageCollection} 'messageCollection' name=ID '{' messages+=Message* '}'
		public Group getGroup() { return cGroup; }
		
		//{MessageCollection}
		public Action getMessageCollectionAction_0() { return cMessageCollectionAction_0; }
		
		//'messageCollection'
		public Keyword getMessageCollectionKeyword_1() { return cMessageCollectionKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//messages+=Message*
		public Assignment getMessagesAssignment_4() { return cMessagesAssignment_4; }
		
		//Message
		public RuleCall getMessagesMessageParserRuleCall_4_0() { return cMessagesMessageParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMessageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeFStructTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeFStructTypeFQNParserRuleCall_3_0_1 = (RuleCall)cTypeFStructTypeCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cKeyKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cKeyAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cKeyFFieldCrossReference_4_1_0 = (CrossReference)cKeyAssignment_4_1.eContents().get(0);
		private final RuleCall cKeyFFieldFQNParserRuleCall_4_1_0_1 = (RuleCall)cKeyFFieldCrossReference_4_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Message:
		//	'message' name=ID ':' type=[DataTypes::FStructType|FQN] ('key' key=[DataTypes::FField|FQN])? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'message' name=ID ':' type=[DataTypes::FStructType|FQN] ('key' key=[DataTypes::FField|FQN])? ';'?
		public Group getGroup() { return cGroup; }
		
		//'message'
		public Keyword getMessageKeyword_0() { return cMessageKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[DataTypes::FStructType|FQN]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[DataTypes::FStructType|FQN]
		public CrossReference getTypeFStructTypeCrossReference_3_0() { return cTypeFStructTypeCrossReference_3_0; }
		
		//FQN
		public RuleCall getTypeFStructTypeFQNParserRuleCall_3_0_1() { return cTypeFStructTypeFQNParserRuleCall_3_0_1; }
		
		//('key' key=[DataTypes::FField|FQN])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'key'
		public Keyword getKeyKeyword_4_0() { return cKeyKeyword_4_0; }
		
		//key=[DataTypes::FField|FQN]
		public Assignment getKeyAssignment_4_1() { return cKeyAssignment_4_1; }
		
		//[DataTypes::FField|FQN]
		public CrossReference getKeyFFieldCrossReference_4_1_0() { return cKeyFFieldCrossReference_4_1_0; }
		
		//FQN
		public RuleCall getKeyFFieldFQNParserRuleCall_4_1_0_1() { return cKeyFFieldFQNParserRuleCall_4_1_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ArtifactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.Artifact");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cJarAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cJarJarKeyword_0_0_0 = (Keyword)cJarAssignment_0_0.eContents().get(0);
		private final Assignment cSharedObjectAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cSharedObjectSharedObjectKeyword_0_1_0 = (Keyword)cSharedObjectAssignment_0_1.eContents().get(0);
		private final Assignment cConfigurationFileAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final Keyword cConfigurationFileFileKeyword_0_2_0 = (Keyword)cConfigurationFileAssignment_0_2.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPathAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPathSTRINGTerminalRuleCall_3_0 = (RuleCall)cPathAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * Rule to create (software) artifact. Artifacts can have dependencies. 
		// * All artifacts are always found in RIAPSAPPS/artifacts folder
		// * 
		// * / Artifact:
		//	(jar?='jar' | sharedObject?='sharedObject' | configurationFile?='file') name=ID ':' path=STRING ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//(jar?='jar' | sharedObject?='sharedObject' | configurationFile?='file') name=ID ':' path=STRING ';'?
		public Group getGroup() { return cGroup; }
		
		//(jar?='jar' | sharedObject?='sharedObject' | configurationFile?='file')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//jar?='jar'
		public Assignment getJarAssignment_0_0() { return cJarAssignment_0_0; }
		
		//'jar'
		public Keyword getJarJarKeyword_0_0_0() { return cJarJarKeyword_0_0_0; }
		
		//sharedObject?='sharedObject'
		public Assignment getSharedObjectAssignment_0_1() { return cSharedObjectAssignment_0_1; }
		
		//'sharedObject'
		public Keyword getSharedObjectSharedObjectKeyword_0_1_0() { return cSharedObjectSharedObjectKeyword_0_1_0; }
		
		//configurationFile?='file'
		public Assignment getConfigurationFileAssignment_0_2() { return cConfigurationFileAssignment_0_2; }
		
		//'file'
		public Keyword getConfigurationFileFileKeyword_0_2_0() { return cConfigurationFileFileKeyword_0_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//path=STRING
		public Assignment getPathAssignment_3() { return cPathAssignment_3; }
		
		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_3_0() { return cPathSTRINGTerminalRuleCall_3_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.Component");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAppComponentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeviceComponentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Component:
		//	AppComponent | DeviceComponent;
		@Override public ParserRule getRule() { return rule; }
		
		//AppComponent | DeviceComponent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AppComponent
		public RuleCall getAppComponentParserRuleCall_0() { return cAppComponentParserRuleCall_0; }
		
		//DeviceComponent
		public RuleCall getDeviceComponentParserRuleCall_1() { return cDeviceComponentParserRuleCall_1; }
	}
	public class DeviceComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.DeviceComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeviceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFormalsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFormalsComponentFormalParserRuleCall_2_1_0 = (RuleCall)cFormalsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cFormalsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cFormalsComponentFormalParserRuleCall_2_2_1_0 = (RuleCall)cFormalsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cRequirementsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cRequirementsRequirementParserRuleCall_4_0_0 = (RuleCall)cRequirementsAssignment_4_0.eContents().get(0);
		private final Assignment cPortsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cPortsPortParserRuleCall_4_1_0 = (RuleCall)cPortsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DeviceComponent:
		//	'device' name=ID ('(' formals+=ComponentFormal (',' formals+=ComponentFormal)* ')')?
		//	'{' (requirements+=Requirement | ports+=Port)+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'device' name=ID ('(' formals+=ComponentFormal (',' formals+=ComponentFormal)* ')')? '{' (requirements+=Requirement |
		//ports+=Port)+ '}'
		public Group getGroup() { return cGroup; }
		
		//'device'
		public Keyword getDeviceKeyword_0() { return cDeviceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' formals+=ComponentFormal (',' formals+=ComponentFormal)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//formals+=ComponentFormal
		public Assignment getFormalsAssignment_2_1() { return cFormalsAssignment_2_1; }
		
		//ComponentFormal
		public RuleCall getFormalsComponentFormalParserRuleCall_2_1_0() { return cFormalsComponentFormalParserRuleCall_2_1_0; }
		
		//(',' formals+=ComponentFormal)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//formals+=ComponentFormal
		public Assignment getFormalsAssignment_2_2_1() { return cFormalsAssignment_2_2_1; }
		
		//ComponentFormal
		public RuleCall getFormalsComponentFormalParserRuleCall_2_2_1_0() { return cFormalsComponentFormalParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(requirements+=Requirement | ports+=Port)+
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//requirements+=Requirement
		public Assignment getRequirementsAssignment_4_0() { return cRequirementsAssignment_4_0; }
		
		//Requirement
		public RuleCall getRequirementsRequirementParserRuleCall_4_0_0() { return cRequirementsRequirementParserRuleCall_4_0_0; }
		
		//ports+=Port
		public Assignment getPortsAssignment_4_1() { return cPortsAssignment_4_1; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_4_1_0() { return cPortsPortParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AppComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.AppComponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFormalsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFormalsComponentFormalParserRuleCall_2_1_0 = (RuleCall)cFormalsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cFormalsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cFormalsComponentFormalParserRuleCall_2_2_1_0 = (RuleCall)cFormalsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cRequirementsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cRequirementsRequirementParserRuleCall_4_0_0 = (RuleCall)cRequirementsAssignment_4_0.eContents().get(0);
		private final Assignment cPortsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cPortsPortParserRuleCall_4_1_0 = (RuleCall)cPortsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Component types used in the application
		//AppComponent:
		//	'component' name=ID ('(' formals+=ComponentFormal (',' formals+=ComponentFormal)* ')')?
		//	'{' (requirements+=Requirement | ports+=Port)+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'component' name=ID ('(' formals+=ComponentFormal (',' formals+=ComponentFormal)* ')')? '{' (requirements+=Requirement |
		//ports+=Port)+ '}'
		public Group getGroup() { return cGroup; }
		
		//'component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' formals+=ComponentFormal (',' formals+=ComponentFormal)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//formals+=ComponentFormal
		public Assignment getFormalsAssignment_2_1() { return cFormalsAssignment_2_1; }
		
		//ComponentFormal
		public RuleCall getFormalsComponentFormalParserRuleCall_2_1_0() { return cFormalsComponentFormalParserRuleCall_2_1_0; }
		
		//(',' formals+=ComponentFormal)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//formals+=ComponentFormal
		public Assignment getFormalsAssignment_2_2_1() { return cFormalsAssignment_2_2_1; }
		
		//ComponentFormal
		public RuleCall getFormalsComponentFormalParserRuleCall_2_2_1_0() { return cFormalsComponentFormalParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(requirements+=Requirement | ports+=Port)+
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//requirements+=Requirement
		public Assignment getRequirementsAssignment_4_0() { return cRequirementsAssignment_4_0; }
		
		//Requirement
		public RuleCall getRequirementsRequirementParserRuleCall_4_0_0() { return cRequirementsRequirementParserRuleCall_4_0_0; }
		
		//ports+=Port
		public Assignment getPortsAssignment_4_1() { return cPortsAssignment_4_1; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_4_1_0() { return cPortsPortParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MemoryUnitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.MemoryUnits");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cKbAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cKbKBKeyword_0_0 = (Keyword)cKbAssignment_0.eContents().get(0);
		private final Assignment cMbAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cMbMBKeyword_1_0 = (Keyword)cMbAssignment_1.eContents().get(0);
		private final Assignment cGbAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cGbGBKeyword_2_0 = (Keyword)cGbAssignment_2.eContents().get(0);
		
		/// *
		// * Rule that defines different supported memory units. 
		// * / MemoryUnits:
		//	kb?='KB'
		//	| mb?='MB'
		//	| gb?="GB";
		@Override public ParserRule getRule() { return rule; }
		
		//kb?='KB' | mb?='MB' | gb?="GB"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//kb?='KB'
		public Assignment getKbAssignment_0() { return cKbAssignment_0; }
		
		//'KB'
		public Keyword getKbKBKeyword_0_0() { return cKbKBKeyword_0_0; }
		
		//mb?='MB'
		public Assignment getMbAssignment_1() { return cMbAssignment_1; }
		
		//'MB'
		public Keyword getMbMBKeyword_1_0() { return cMbMBKeyword_1_0; }
		
		//gb?="GB"
		public Assignment getGbAssignment_2() { return cGbAssignment_2; }
		
		//"GB"
		public Keyword getGbGBKeyword_2_0() { return cGbGBKeyword_2_0; }
	}
	public class RequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.Requirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiresKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cArtifactKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cArtifactrequirementAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cArtifactrequirementArtifactCrossReference_1_0_1_0 = (CrossReference)cArtifactrequirementAssignment_1_0_1.eContents().get(0);
		private final RuleCall cArtifactrequirementArtifactFQNParserRuleCall_1_0_1_0_1 = (RuleCall)cArtifactrequirementArtifactCrossReference_1_0_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cMemoryKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cMemoryRequirementAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cMemoryRequirementINTTerminalRuleCall_1_1_1_0 = (RuleCall)cMemoryRequirementAssignment_1_1_1.eContents().get(0);
		private final Assignment cMemoryunitAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cMemoryunitMemoryUnitsParserRuleCall_1_1_2_0 = (RuleCall)cMemoryunitAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cStorageKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cStorageRequirementAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cStorageRequirementINTTerminalRuleCall_1_2_1_0 = (RuleCall)cStorageRequirementAssignment_1_2_1.eContents().get(0);
		private final Assignment cStorageunitAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cStorageunitMemoryUnitsParserRuleCall_1_2_2_0 = (RuleCall)cStorageunitAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cDeviceKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cDeviceRequirementAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cDeviceRequirementSTRINGTerminalRuleCall_1_3_1_0 = (RuleCall)cDeviceRequirementAssignment_1_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Requirement:
		//	'requires' ('artifact' artifactrequirement=[Artifact|FQN] | 'memory' memoryRequirement=INT memoryunit=MemoryUnits |
		//	'storage' storageRequirement=INT storageunit=MemoryUnits | 'device' deviceRequirement=STRING) ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'requires' ('artifact' artifactrequirement=[Artifact|FQN] | 'memory' memoryRequirement=INT memoryunit=MemoryUnits |
		//'storage' storageRequirement=INT storageunit=MemoryUnits | 'device' deviceRequirement=STRING) ';'?
		public Group getGroup() { return cGroup; }
		
		//'requires'
		public Keyword getRequiresKeyword_0() { return cRequiresKeyword_0; }
		
		//('artifact' artifactrequirement=[Artifact|FQN] | 'memory' memoryRequirement=INT memoryunit=MemoryUnits | 'storage'
		//storageRequirement=INT storageunit=MemoryUnits | 'device' deviceRequirement=STRING)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'artifact' artifactrequirement=[Artifact|FQN]
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'artifact'
		public Keyword getArtifactKeyword_1_0_0() { return cArtifactKeyword_1_0_0; }
		
		//artifactrequirement=[Artifact|FQN]
		public Assignment getArtifactrequirementAssignment_1_0_1() { return cArtifactrequirementAssignment_1_0_1; }
		
		//[Artifact|FQN]
		public CrossReference getArtifactrequirementArtifactCrossReference_1_0_1_0() { return cArtifactrequirementArtifactCrossReference_1_0_1_0; }
		
		//FQN
		public RuleCall getArtifactrequirementArtifactFQNParserRuleCall_1_0_1_0_1() { return cArtifactrequirementArtifactFQNParserRuleCall_1_0_1_0_1; }
		
		//'memory' memoryRequirement=INT memoryunit=MemoryUnits
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'memory'
		public Keyword getMemoryKeyword_1_1_0() { return cMemoryKeyword_1_1_0; }
		
		//memoryRequirement=INT
		public Assignment getMemoryRequirementAssignment_1_1_1() { return cMemoryRequirementAssignment_1_1_1; }
		
		//INT
		public RuleCall getMemoryRequirementINTTerminalRuleCall_1_1_1_0() { return cMemoryRequirementINTTerminalRuleCall_1_1_1_0; }
		
		//memoryunit=MemoryUnits
		public Assignment getMemoryunitAssignment_1_1_2() { return cMemoryunitAssignment_1_1_2; }
		
		//MemoryUnits
		public RuleCall getMemoryunitMemoryUnitsParserRuleCall_1_1_2_0() { return cMemoryunitMemoryUnitsParserRuleCall_1_1_2_0; }
		
		//'storage' storageRequirement=INT storageunit=MemoryUnits
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'storage'
		public Keyword getStorageKeyword_1_2_0() { return cStorageKeyword_1_2_0; }
		
		//storageRequirement=INT
		public Assignment getStorageRequirementAssignment_1_2_1() { return cStorageRequirementAssignment_1_2_1; }
		
		//INT
		public RuleCall getStorageRequirementINTTerminalRuleCall_1_2_1_0() { return cStorageRequirementINTTerminalRuleCall_1_2_1_0; }
		
		//storageunit=MemoryUnits
		public Assignment getStorageunitAssignment_1_2_2() { return cStorageunitAssignment_1_2_2; }
		
		//MemoryUnits
		public RuleCall getStorageunitMemoryUnitsParserRuleCall_1_2_2_0() { return cStorageunitMemoryUnitsParserRuleCall_1_2_2_0; }
		
		//'device' deviceRequirement=STRING
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'device'
		public Keyword getDeviceKeyword_1_3_0() { return cDeviceKeyword_1_3_0; }
		
		//deviceRequirement=STRING
		public Assignment getDeviceRequirementAssignment_1_3_1() { return cDeviceRequirementAssignment_1_3_1; }
		
		//STRING
		public RuleCall getDeviceRequirementSTRINGTerminalRuleCall_1_3_1_0() { return cDeviceRequirementSTRINGTerminalRuleCall_1_3_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.Port");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPubPortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSubPortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cClntPortParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSrvPortParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cReqPortParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTimPortParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cInsPortParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Port:
		//	PubPort
		//	| SubPort
		//	| ClntPort
		//	| SrvPort
		//	| ReqPort
		//	| TimPort
		//	| InsPort;
		@Override public ParserRule getRule() { return rule; }
		
		//PubPort | SubPort | ClntPort | SrvPort | ReqPort | TimPort | InsPort
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PubPort
		public RuleCall getPubPortParserRuleCall_0() { return cPubPortParserRuleCall_0; }
		
		//SubPort
		public RuleCall getSubPortParserRuleCall_1() { return cSubPortParserRuleCall_1; }
		
		//ClntPort
		public RuleCall getClntPortParserRuleCall_2() { return cClntPortParserRuleCall_2; }
		
		//SrvPort
		public RuleCall getSrvPortParserRuleCall_3() { return cSrvPortParserRuleCall_3; }
		
		//ReqPort
		public RuleCall getReqPortParserRuleCall_4() { return cReqPortParserRuleCall_4; }
		
		//TimPort
		public RuleCall getTimPortParserRuleCall_5() { return cTimPortParserRuleCall_5; }
		
		//InsPort
		public RuleCall getInsPortParserRuleCall_6() { return cInsPortParserRuleCall_6; }
	}
	public class PubPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.PubPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPubKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeMessageCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeMessageFQNParserRuleCall_3_0_1 = (RuleCall)cTypeMessageCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PubPort:
		//	'pub' name=ID ':' type=[Message|FQN] ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'pub' name=ID ':' type=[Message|FQN] ';'?
		public Group getGroup() { return cGroup; }
		
		//'pub'
		public Keyword getPubKeyword_0() { return cPubKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[Message|FQN]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[Message|FQN]
		public CrossReference getTypeMessageCrossReference_3_0() { return cTypeMessageCrossReference_3_0; }
		
		//FQN
		public RuleCall getTypeMessageFQNParserRuleCall_3_0_1() { return cTypeMessageFQNParserRuleCall_3_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class SubPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.SubPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeMessageCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeMessageFQNParserRuleCall_3_0_1 = (RuleCall)cTypeMessageCrossReference_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SubPort:
		//	'sub' name=ID ':' type=[Message|FQN] ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'sub' name=ID ':' type=[Message|FQN] ';'?
		public Group getGroup() { return cGroup; }
		
		//'sub'
		public Keyword getSubKeyword_0() { return cSubKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[Message|FQN]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[Message|FQN]
		public CrossReference getTypeMessageCrossReference_3_0() { return cTypeMessageCrossReference_3_0; }
		
		//FQN
		public RuleCall getTypeMessageFQNParserRuleCall_3_0_1() { return cTypeMessageFQNParserRuleCall_3_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ClntPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.ClntPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCltKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cReq_typeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cReq_typeMessageCrossReference_4_0 = (CrossReference)cReq_typeAssignment_4.eContents().get(0);
		private final RuleCall cReq_typeMessageFQNParserRuleCall_4_0_1 = (RuleCall)cReq_typeMessageCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRep_typeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cRep_typeMessageCrossReference_6_0 = (CrossReference)cRep_typeAssignment_6.eContents().get(0);
		private final RuleCall cRep_typeMessageFQNParserRuleCall_6_0_1 = (RuleCall)cRep_typeMessageCrossReference_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// Client port (request and reply message types) - Owned by an SMI client
		//// Client operation is expected to send on the port and then receive on the same port
		//ClntPort:
		//	'clt' name=ID ':' '(' req_type=[Message|FQN] ',' rep_type=[Message|FQN] ')' ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'clt' name=ID ':' '(' req_type=[Message|FQN] ',' rep_type=[Message|FQN] ')' ';'?
		public Group getGroup() { return cGroup; }
		
		//'clt'
		public Keyword getCltKeyword_0() { return cCltKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//req_type=[Message|FQN]
		public Assignment getReq_typeAssignment_4() { return cReq_typeAssignment_4; }
		
		//[Message|FQN]
		public CrossReference getReq_typeMessageCrossReference_4_0() { return cReq_typeMessageCrossReference_4_0; }
		
		//FQN
		public RuleCall getReq_typeMessageFQNParserRuleCall_4_0_1() { return cReq_typeMessageFQNParserRuleCall_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//rep_type=[Message|FQN]
		public Assignment getRep_typeAssignment_6() { return cRep_typeAssignment_6; }
		
		//[Message|FQN]
		public CrossReference getRep_typeMessageCrossReference_6_0() { return cRep_typeMessageCrossReference_6_0; }
		
		//FQN
		public RuleCall getRep_typeMessageFQNParserRuleCall_6_0_1() { return cRep_typeMessageFQNParserRuleCall_6_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//';'?
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class SrvPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.SrvPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSrvKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cReq_typeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cReq_typeMessageCrossReference_4_0 = (CrossReference)cReq_typeAssignment_4.eContents().get(0);
		private final RuleCall cReq_typeMessageFQNParserRuleCall_4_0_1 = (RuleCall)cReq_typeMessageCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRep_typeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cRep_typeMessageCrossReference_6_0 = (CrossReference)cRep_typeAssignment_6.eContents().get(0);
		private final RuleCall cRep_typeMessageFQNParserRuleCall_6_0_1 = (RuleCall)cRep_typeMessageCrossReference_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//SrvPort:
		//	'srv' name=ID ':' '(' req_type=[Message|FQN] ',' rep_type=[Message|FQN] ')' ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'srv' name=ID ':' '(' req_type=[Message|FQN] ',' rep_type=[Message|FQN] ')' ';'?
		public Group getGroup() { return cGroup; }
		
		//'srv'
		public Keyword getSrvKeyword_0() { return cSrvKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//req_type=[Message|FQN]
		public Assignment getReq_typeAssignment_4() { return cReq_typeAssignment_4; }
		
		//[Message|FQN]
		public CrossReference getReq_typeMessageCrossReference_4_0() { return cReq_typeMessageCrossReference_4_0; }
		
		//FQN
		public RuleCall getReq_typeMessageFQNParserRuleCall_4_0_1() { return cReq_typeMessageFQNParserRuleCall_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//rep_type=[Message|FQN]
		public Assignment getRep_typeAssignment_6() { return cRep_typeAssignment_6; }
		
		//[Message|FQN]
		public CrossReference getRep_typeMessageCrossReference_6_0() { return cRep_typeMessageCrossReference_6_0; }
		
		//FQN
		public RuleCall getRep_typeMessageFQNParserRuleCall_6_0_1() { return cRep_typeMessageFQNParserRuleCall_6_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//';'?
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class ReqPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.ReqPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cReq_typeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cReq_typeMessageCrossReference_4_0 = (CrossReference)cReq_typeAssignment_4.eContents().get(0);
		private final RuleCall cReq_typeMessageFQNParserRuleCall_4_0_1 = (RuleCall)cReq_typeMessageCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRep_typeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cRep_typeMessageCrossReference_6_0 = (CrossReference)cRep_typeAssignment_6.eContents().get(0);
		private final RuleCall cRep_typeMessageFQNParserRuleCall_6_0_1 = (RuleCall)cRep_typeMessageCrossReference_6_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ReqPort:
		//	'req' name=ID ':' '(' req_type=[Message|FQN] ',' rep_type=[Message|FQN] ')' ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'req' name=ID ':' '(' req_type=[Message|FQN] ',' rep_type=[Message|FQN] ')' ';'?
		public Group getGroup() { return cGroup; }
		
		//'req'
		public Keyword getReqKeyword_0() { return cReqKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//req_type=[Message|FQN]
		public Assignment getReq_typeAssignment_4() { return cReq_typeAssignment_4; }
		
		//[Message|FQN]
		public CrossReference getReq_typeMessageCrossReference_4_0() { return cReq_typeMessageCrossReference_4_0; }
		
		//FQN
		public RuleCall getReq_typeMessageFQNParserRuleCall_4_0_1() { return cReq_typeMessageFQNParserRuleCall_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//rep_type=[Message|FQN]
		public Assignment getRep_typeAssignment_6() { return cRep_typeAssignment_6; }
		
		//[Message|FQN]
		public CrossReference getRep_typeMessageCrossReference_6_0() { return cRep_typeMessageCrossReference_6_0; }
		
		//FQN
		public RuleCall getRep_typeMessageFQNParserRuleCall_6_0_1() { return cRep_typeMessageFQNParserRuleCall_6_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//';'?
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}
	public class TimeUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cMonthsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cMonthsMonthsKeyword_0_0 = (Keyword)cMonthsAssignment_0.eContents().get(0);
		private final Assignment cDaysAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cDaysDaysKeyword_1_0 = (Keyword)cDaysAssignment_1.eContents().get(0);
		private final Assignment cSecondsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cSecondsSKeyword_2_0 = (Keyword)cSecondsAssignment_2.eContents().get(0);
		private final Assignment cMillisecondsAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cMillisecondsMsKeyword_3_0 = (Keyword)cMillisecondsAssignment_3.eContents().get(0);
		private final Assignment cNanosecondsAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cNanosecondsNsKeyword_4_0 = (Keyword)cNanosecondsAssignment_4.eContents().get(0);
		private final Assignment cMicrosecondsAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cMicrosecondsMusKeyword_5_0 = (Keyword)cMicrosecondsAssignment_5.eContents().get(0);
		
		/// *
		// * Rule that defines different supported time units.
		// * / TimeUnit:
		//	months?='months'
		//	| days?='days'
		//	| seconds?='s'
		//	| milliseconds?='ms'
		//	| nanoseconds?='ns'
		//	| microseconds?='mus';
		@Override public ParserRule getRule() { return rule; }
		
		//months?='months' | days?='days' | seconds?='s' | milliseconds?='ms' | nanoseconds?='ns' | microseconds?='mus'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//months?='months'
		public Assignment getMonthsAssignment_0() { return cMonthsAssignment_0; }
		
		//'months'
		public Keyword getMonthsMonthsKeyword_0_0() { return cMonthsMonthsKeyword_0_0; }
		
		//days?='days'
		public Assignment getDaysAssignment_1() { return cDaysAssignment_1; }
		
		//'days'
		public Keyword getDaysDaysKeyword_1_0() { return cDaysDaysKeyword_1_0; }
		
		//seconds?='s'
		public Assignment getSecondsAssignment_2() { return cSecondsAssignment_2; }
		
		//'s'
		public Keyword getSecondsSKeyword_2_0() { return cSecondsSKeyword_2_0; }
		
		//milliseconds?='ms'
		public Assignment getMillisecondsAssignment_3() { return cMillisecondsAssignment_3; }
		
		//'ms'
		public Keyword getMillisecondsMsKeyword_3_0() { return cMillisecondsMsKeyword_3_0; }
		
		//nanoseconds?='ns'
		public Assignment getNanosecondsAssignment_4() { return cNanosecondsAssignment_4; }
		
		//'ns'
		public Keyword getNanosecondsNsKeyword_4_0() { return cNanosecondsNsKeyword_4_0; }
		
		//microseconds?='mus'
		public Assignment getMicrosecondsAssignment_5() { return cMicrosecondsAssignment_5; }
		
		//'mus'
		public Keyword getMicrosecondsMusKeyword_5_0() { return cMicrosecondsMusKeyword_5_0; }
	}
	public class TimPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.TimPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cSpecAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cSpecNumberParserRuleCall_2_0_0 = (RuleCall)cSpecAssignment_2_0.eContents().get(0);
		private final Assignment cUnitAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cUnitTimeUnitParserRuleCall_2_1_0 = (RuleCall)cUnitAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TimPort:
		//	'timer' name=ID (spec=Number unit=TimeUnit) ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'timer' name=ID (spec=Number unit=TimeUnit) ';'?
		public Group getGroup() { return cGroup; }
		
		//'timer'
		public Keyword getTimerKeyword_0() { return cTimerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(spec=Number unit=TimeUnit)
		public Group getGroup_2() { return cGroup_2; }
		
		//spec=Number
		public Assignment getSpecAssignment_2_0() { return cSpecAssignment_2_0; }
		
		//Number
		public RuleCall getSpecNumberParserRuleCall_2_0_0() { return cSpecNumberParserRuleCall_2_0_0; }
		
		//unit=TimeUnit
		public Assignment getUnitAssignment_2_1() { return cUnitAssignment_2_1; }
		
		//TimeUnit
		public RuleCall getUnitTimeUnitParserRuleCall_2_1_0() { return cUnitTimeUnitParserRuleCall_2_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class InsPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.InsPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsideKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cSpecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cSpecDefaultKeyword_2_0 = (Keyword)cSpecAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Inside port
		//InsPort:
		//	'inside' name=ID spec?='default'? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'inside' name=ID spec?='default'? ';'?
		public Group getGroup() { return cGroup; }
		
		//'inside'
		public Keyword getInsideKeyword_0() { return cInsideKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//spec?='default'?
		public Assignment getSpecAssignment_2() { return cSpecAssignment_2; }
		
		//'default'
		public Keyword getSpecDefaultKeyword_2_0() { return cSpecDefaultKeyword_2_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ComponentFormalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.ComponentFormal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgDefaultAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgDefaultFormalDefaultParserRuleCall_1_1_0 = (RuleCall)cArgDefaultAssignment_1_1.eContents().get(0);
		
		//ComponentFormal:
		//	name=ID ('=' argDefault=FormalDefault);
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('=' argDefault=FormalDefault)
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('=' argDefault=FormalDefault)
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//argDefault=FormalDefault
		public Assignment getArgDefaultAssignment_1_1() { return cArgDefaultAssignment_1_1; }
		
		//FormalDefault
		public RuleCall getArgDefaultFormalDefaultParserRuleCall_1_1_0() { return cArgDefaultFormalDefaultParserRuleCall_1_1_0; }
	}
	public class ActorFormalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.ActorFormal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgDefaultAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgDefaultFormalDefaultParserRuleCall_1_1_0 = (RuleCall)cArgDefaultAssignment_1_1.eContents().get(0);
		
		//ActorFormal:
		//	name=ID ('=' argDefault=FormalDefault);
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('=' argDefault=FormalDefault)
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('=' argDefault=FormalDefault)
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//argDefault=FormalDefault
		public Assignment getArgDefaultAssignment_1_1() { return cArgDefaultAssignment_1_1; }
		
		//FormalDefault
		public RuleCall getArgDefaultFormalDefaultParserRuleCall_1_1_0() { return cArgDefaultFormalDefaultParserRuleCall_1_1_0; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFormalsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFormalsActorFormalParserRuleCall_2_1_0 = (RuleCall)cFormalsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cFormalsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cFormalsActorFormalParserRuleCall_2_2_1_0 = (RuleCall)cFormalsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLocalKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLocalsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cLocalsMessageCrossReference_4_1_0 = (CrossReference)cLocalsAssignment_4_1.eContents().get(0);
		private final RuleCall cLocalsMessageFQNParserRuleCall_4_1_0_1 = (RuleCall)cLocalsMessageCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cLocalsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cLocalsMessageCrossReference_4_2_1_0 = (CrossReference)cLocalsAssignment_4_2_1.eContents().get(0);
		private final RuleCall cLocalsMessageFQNParserRuleCall_4_2_1_0_1 = (RuleCall)cLocalsMessageCrossReference_4_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInternalKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInternalsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cInternalsMessageCrossReference_5_1_0 = (CrossReference)cInternalsAssignment_5_1.eContents().get(0);
		private final RuleCall cInternalsMessageFQNParserRuleCall_5_1_0_1 = (RuleCall)cInternalsMessageCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cInternalsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final CrossReference cInternalsMessageCrossReference_5_2_1_0 = (CrossReference)cInternalsAssignment_5_2_1.eContents().get(0);
		private final RuleCall cInternalsMessageFQNParserRuleCall_5_2_1_0_1 = (RuleCall)cInternalsMessageCrossReference_5_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cCompsectionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCompsectionInstanceSectionParserRuleCall_6_0 = (RuleCall)cCompsectionAssignment_6.eContents().get(0);
		private final Assignment cWiresAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cWiresWireParserRuleCall_7_0 = (RuleCall)cWiresAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Actor:
		//	'actor' name=ID ('(' formals+=ActorFormal (',' formals+=ActorFormal)* ')')?
		//	'{' ('local' locals+=[Message|FQN] (',' locals+=[Message|FQN])* ';'?)? ('internal' internals+=[Message|FQN] (','
		//	internals+=[Message|FQN])* ';'?)? // Optional: internal messages (stay within the actor)
		//	compsection=InstanceSection
		//	wires+=Wire*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'actor' name=ID ('(' formals+=ActorFormal (',' formals+=ActorFormal)* ')')? '{' ('local' locals+=[Message|FQN] (','
		//locals+=[Message|FQN])* ';'?)? ('internal' internals+=[Message|FQN] (',' internals+=[Message|FQN])* ';'?)? // Optional: internal messages (stay within the actor)
		//compsection=InstanceSection wires+=Wire* '}'
		public Group getGroup() { return cGroup; }
		
		//'actor'
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' formals+=ActorFormal (',' formals+=ActorFormal)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//formals+=ActorFormal
		public Assignment getFormalsAssignment_2_1() { return cFormalsAssignment_2_1; }
		
		//ActorFormal
		public RuleCall getFormalsActorFormalParserRuleCall_2_1_0() { return cFormalsActorFormalParserRuleCall_2_1_0; }
		
		//(',' formals+=ActorFormal)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//formals+=ActorFormal
		public Assignment getFormalsAssignment_2_2_1() { return cFormalsAssignment_2_2_1; }
		
		//ActorFormal
		public RuleCall getFormalsActorFormalParserRuleCall_2_2_1_0() { return cFormalsActorFormalParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('local' locals+=[Message|FQN] (',' locals+=[Message|FQN])* ';'?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'local'
		public Keyword getLocalKeyword_4_0() { return cLocalKeyword_4_0; }
		
		//locals+=[Message|FQN]
		public Assignment getLocalsAssignment_4_1() { return cLocalsAssignment_4_1; }
		
		//[Message|FQN]
		public CrossReference getLocalsMessageCrossReference_4_1_0() { return cLocalsMessageCrossReference_4_1_0; }
		
		//FQN
		public RuleCall getLocalsMessageFQNParserRuleCall_4_1_0_1() { return cLocalsMessageFQNParserRuleCall_4_1_0_1; }
		
		//(',' locals+=[Message|FQN])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//locals+=[Message|FQN]
		public Assignment getLocalsAssignment_4_2_1() { return cLocalsAssignment_4_2_1; }
		
		//[Message|FQN]
		public CrossReference getLocalsMessageCrossReference_4_2_1_0() { return cLocalsMessageCrossReference_4_2_1_0; }
		
		//FQN
		public RuleCall getLocalsMessageFQNParserRuleCall_4_2_1_0_1() { return cLocalsMessageFQNParserRuleCall_4_2_1_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_4_3() { return cSemicolonKeyword_4_3; }
		
		//('internal' internals+=[Message|FQN] (',' internals+=[Message|FQN])* ';'?)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'internal'
		public Keyword getInternalKeyword_5_0() { return cInternalKeyword_5_0; }
		
		//internals+=[Message|FQN]
		public Assignment getInternalsAssignment_5_1() { return cInternalsAssignment_5_1; }
		
		//[Message|FQN]
		public CrossReference getInternalsMessageCrossReference_5_1_0() { return cInternalsMessageCrossReference_5_1_0; }
		
		//FQN
		public RuleCall getInternalsMessageFQNParserRuleCall_5_1_0_1() { return cInternalsMessageFQNParserRuleCall_5_1_0_1; }
		
		//(',' internals+=[Message|FQN])*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }
		
		//internals+=[Message|FQN]
		public Assignment getInternalsAssignment_5_2_1() { return cInternalsAssignment_5_2_1; }
		
		//[Message|FQN]
		public CrossReference getInternalsMessageCrossReference_5_2_1_0() { return cInternalsMessageCrossReference_5_2_1_0; }
		
		//FQN
		public RuleCall getInternalsMessageFQNParserRuleCall_5_2_1_0_1() { return cInternalsMessageFQNParserRuleCall_5_2_1_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_5_3() { return cSemicolonKeyword_5_3; }
		
		//// Optional: internal messages (stay within the actor)
		//compsection=InstanceSection
		public Assignment getCompsectionAssignment_6() { return cCompsectionAssignment_6; }
		
		//InstanceSection
		public RuleCall getCompsectionInstanceSectionParserRuleCall_6_0() { return cCompsectionInstanceSectionParserRuleCall_6_0; }
		
		//wires+=Wire*
		public Assignment getWiresAssignment_7() { return cWiresAssignment_7; }
		
		//Wire
		public RuleCall getWiresWireParserRuleCall_7_0() { return cWiresWireParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class InstanceSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.InstanceSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInstanceSectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInstancesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInstancesInstanceParserRuleCall_2_0 = (RuleCall)cInstancesAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Wiring of clients to servers (both SMI and AMI)
		//InstanceSection:
		//	{InstanceSection}
		//	'{'
		//	instances+=Instance+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{InstanceSection} '{' instances+=Instance+ '}'
		public Group getGroup() { return cGroup; }
		
		//{InstanceSection}
		public Action getInstanceSectionAction_0() { return cInstanceSectionAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//instances+=Instance+
		public Assignment getInstancesAssignment_2() { return cInstancesAssignment_2; }
		
		//Instance
		public RuleCall getInstancesInstanceParserRuleCall_2_0() { return cInstancesInstanceParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class WireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.Wire");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWireAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cClntAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final CrossReference cClntClntPortCrossReference_1_0_0_0 = (CrossReference)cClntAssignment_1_0_0.eContents().get(0);
		private final RuleCall cClntClntPortFQNParserRuleCall_1_0_0_0_1 = (RuleCall)cClntClntPortCrossReference_1_0_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cServerAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final CrossReference cServerSrvPortCrossReference_1_0_2_0 = (CrossReference)cServerAssignment_1_0_2.eContents().get(0);
		private final RuleCall cServerSrvPortFQNParserRuleCall_1_0_2_0_1 = (RuleCall)cServerSrvPortCrossReference_1_0_2_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cAmiAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cAmiAmiKeyword_1_1_0_0 = (Keyword)cAmiAssignment_1_1_0.eContents().get(0);
		private final Assignment cReqAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cReqReqPortCrossReference_1_1_1_0 = (CrossReference)cReqAssignment_1_1_1.eContents().get(0);
		private final RuleCall cReqReqPortFQNParserRuleCall_1_1_1_0_1 = (RuleCall)cReqReqPortCrossReference_1_1_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cServerAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final CrossReference cServerSrvPortCrossReference_1_1_3_0 = (CrossReference)cServerAssignment_1_1_3.eContents().get(0);
		private final RuleCall cServerSrvPortFQNParserRuleCall_1_1_3_0_1 = (RuleCall)cServerSrvPortCrossReference_1_1_3_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Wire:
		//	{Wire} (clnt=[ClntPort|FQN] '=' server=[SrvPort|FQN] | ami?='ami' req=[ReqPort|FQN] '=' server=[SrvPort|FQN]) ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Wire} (clnt=[ClntPort|FQN] '=' server=[SrvPort|FQN] | ami?='ami' req=[ReqPort|FQN] '=' server=[SrvPort|FQN]) ';'?
		public Group getGroup() { return cGroup; }
		
		//{Wire}
		public Action getWireAction_0() { return cWireAction_0; }
		
		//(clnt=[ClntPort|FQN] '=' server=[SrvPort|FQN] | ami?='ami' req=[ReqPort|FQN] '=' server=[SrvPort|FQN])
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//clnt=[ClntPort|FQN] '=' server=[SrvPort|FQN]
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//clnt=[ClntPort|FQN]
		public Assignment getClntAssignment_1_0_0() { return cClntAssignment_1_0_0; }
		
		//[ClntPort|FQN]
		public CrossReference getClntClntPortCrossReference_1_0_0_0() { return cClntClntPortCrossReference_1_0_0_0; }
		
		//FQN
		public RuleCall getClntClntPortFQNParserRuleCall_1_0_0_0_1() { return cClntClntPortFQNParserRuleCall_1_0_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_1() { return cEqualsSignKeyword_1_0_1; }
		
		//server=[SrvPort|FQN]
		public Assignment getServerAssignment_1_0_2() { return cServerAssignment_1_0_2; }
		
		//[SrvPort|FQN]
		public CrossReference getServerSrvPortCrossReference_1_0_2_0() { return cServerSrvPortCrossReference_1_0_2_0; }
		
		//FQN
		public RuleCall getServerSrvPortFQNParserRuleCall_1_0_2_0_1() { return cServerSrvPortFQNParserRuleCall_1_0_2_0_1; }
		
		//ami?='ami' req=[ReqPort|FQN] '=' server=[SrvPort|FQN]
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//ami?='ami'
		public Assignment getAmiAssignment_1_1_0() { return cAmiAssignment_1_1_0; }
		
		//'ami'
		public Keyword getAmiAmiKeyword_1_1_0_0() { return cAmiAmiKeyword_1_1_0_0; }
		
		//req=[ReqPort|FQN]
		public Assignment getReqAssignment_1_1_1() { return cReqAssignment_1_1_1; }
		
		//[ReqPort|FQN]
		public CrossReference getReqReqPortCrossReference_1_1_1_0() { return cReqReqPortCrossReference_1_1_1_0; }
		
		//FQN
		public RuleCall getReqReqPortFQNParserRuleCall_1_1_1_0_1() { return cReqReqPortFQNParserRuleCall_1_1_1_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1_2() { return cEqualsSignKeyword_1_1_2; }
		
		//server=[SrvPort|FQN]
		public Assignment getServerAssignment_1_1_3() { return cServerAssignment_1_1_3; }
		
		//[SrvPort|FQN]
		public CrossReference getServerSrvPortCrossReference_1_1_3_0() { return cServerSrvPortCrossReference_1_1_3_0; }
		
		//FQN
		public RuleCall getServerSrvPortFQNParserRuleCall_1_1_3_0_1() { return cServerSrvPortFQNParserRuleCall_1_1_3_0_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ActualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.Actual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cArgNameComponentFormalCrossReference_0_0 = (CrossReference)cArgNameAssignment_0.eContents().get(0);
		private final RuleCall cArgNameComponentFormalFQNParserRuleCall_0_0_1 = (RuleCall)cArgNameComponentFormalCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgValueActualValueParserRuleCall_2_0 = (RuleCall)cArgValueAssignment_2.eContents().get(0);
		
		//Actual:
		//	argName=[ComponentFormal|FQN] '=' argValue=ActualValue;
		@Override public ParserRule getRule() { return rule; }
		
		//argName=[ComponentFormal|FQN] '=' argValue=ActualValue
		public Group getGroup() { return cGroup; }
		
		//argName=[ComponentFormal|FQN]
		public Assignment getArgNameAssignment_0() { return cArgNameAssignment_0; }
		
		//[ComponentFormal|FQN]
		public CrossReference getArgNameComponentFormalCrossReference_0_0() { return cArgNameComponentFormalCrossReference_0_0; }
		
		//FQN
		public RuleCall getArgNameComponentFormalFQNParserRuleCall_0_0_1() { return cArgNameComponentFormalFQNParserRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//argValue=ActualValue
		public Assignment getArgValueAssignment_2() { return cArgValueAssignment_2; }
		
		//ActualValue
		public RuleCall getArgValueActualValueParserRuleCall_2_0() { return cArgValueActualValueParserRuleCall_2_0; }
	}
	public class ActualValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.ActualValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStringdefaultAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStringdefaultStringDefaultParserRuleCall_0_0 = (RuleCall)cStringdefaultAssignment_0.eContents().get(0);
		private final Assignment cNumberdefaultAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumberdefaultNumberDefaultParserRuleCall_1_0 = (RuleCall)cNumberdefaultAssignment_1.eContents().get(0);
		private final Assignment cBoolDefaultAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cBoolDefaultBoolDefaultParserRuleCall_2_0 = (RuleCall)cBoolDefaultAssignment_2.eContents().get(0);
		private final Assignment cParamAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final CrossReference cParamActorFormalCrossReference_3_0 = (CrossReference)cParamAssignment_3.eContents().get(0);
		private final RuleCall cParamActorFormalFQNParserRuleCall_3_0_1 = (RuleCall)cParamActorFormalCrossReference_3_0.eContents().get(1);
		
		//ActualValue:
		//	stringdefault=StringDefault | numberdefault=NumberDefault | boolDefault=BoolDefault | param=[ActorFormal|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//stringdefault=StringDefault | numberdefault=NumberDefault | boolDefault=BoolDefault | param=[ActorFormal|FQN]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//stringdefault=StringDefault
		public Assignment getStringdefaultAssignment_0() { return cStringdefaultAssignment_0; }
		
		//StringDefault
		public RuleCall getStringdefaultStringDefaultParserRuleCall_0_0() { return cStringdefaultStringDefaultParserRuleCall_0_0; }
		
		//numberdefault=NumberDefault
		public Assignment getNumberdefaultAssignment_1() { return cNumberdefaultAssignment_1; }
		
		//NumberDefault
		public RuleCall getNumberdefaultNumberDefaultParserRuleCall_1_0() { return cNumberdefaultNumberDefaultParserRuleCall_1_0; }
		
		//boolDefault=BoolDefault
		public Assignment getBoolDefaultAssignment_2() { return cBoolDefaultAssignment_2; }
		
		//BoolDefault
		public RuleCall getBoolDefaultBoolDefaultParserRuleCall_2_0() { return cBoolDefaultBoolDefaultParserRuleCall_2_0; }
		
		//param=[ActorFormal|FQN]
		public Assignment getParamAssignment_3() { return cParamAssignment_3; }
		
		//[ActorFormal|FQN]
		public CrossReference getParamActorFormalCrossReference_3_0() { return cParamActorFormalCrossReference_3_0; }
		
		//FQN
		public RuleCall getParamActorFormalFQNParserRuleCall_3_0_1() { return cParamActorFormalFQNParserRuleCall_3_0_1; }
	}
	public class InstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.Instance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeComponentCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeComponentFQNParserRuleCall_2_0_1 = (RuleCall)cTypeComponentCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cActualsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cActualsActualParserRuleCall_3_1_0 = (RuleCall)cActualsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cActualsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cActualsActualParserRuleCall_3_2_1_0 = (RuleCall)cActualsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Instance:
		//	name=ID ':' type=[Component|FQN] ('(' actuals+=Actual (',' actuals+=Actual)* ')')? ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=[Component|FQN] ('(' actuals+=Actual (',' actuals+=Actual)* ')')? ';'?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=[Component|FQN]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[Component|FQN]
		public CrossReference getTypeComponentCrossReference_2_0() { return cTypeComponentCrossReference_2_0; }
		
		//FQN
		public RuleCall getTypeComponentFQNParserRuleCall_2_0_1() { return cTypeComponentFQNParserRuleCall_2_0_1; }
		
		//('(' actuals+=Actual (',' actuals+=Actual)* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//actuals+=Actual
		public Assignment getActualsAssignment_3_1() { return cActualsAssignment_3_1; }
		
		//Actual
		public RuleCall getActualsActualParserRuleCall_3_1_0() { return cActualsActualParserRuleCall_3_1_0; }
		
		//(',' actuals+=Actual)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//actuals+=Actual
		public Assignment getActualsAssignment_3_2_1() { return cActualsAssignment_3_2_1; }
		
		//Actual
		public RuleCall getActualsActualParserRuleCall_3_2_1_0() { return cActualsActualParserRuleCall_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//';'?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	
	
	private final ModelElements pModel;
	private final TerminalRule tINT;
	private final TerminalRule tDECIMAL;
	private final FormalDefaultElements pFormalDefault;
	private final StringDefaultElements pStringDefault;
	private final NumberDefaultElements pNumberDefault;
	private final BoolDefaultElements pBoolDefault;
	private final NumberElements pNumber;
	private final TerminalRule tBOOL;
	private final CollectionElements pCollection;
	private final ComponentCollectionElements pComponentCollection;
	private final ApplicationElements pApplication;
	private final ImportElements pImport;
	private final ImportedFQNElements pImportedFQN;
	private final FQNElements pFQN;
	private final MessageCollectionElements pMessageCollection;
	private final MessageElements pMessage;
	private final ArtifactElements pArtifact;
	private final ComponentElements pComponent;
	private final DeviceComponentElements pDeviceComponent;
	private final AppComponentElements pAppComponent;
	private final MemoryUnitsElements pMemoryUnits;
	private final RequirementElements pRequirement;
	private final PortElements pPort;
	private final PubPortElements pPubPort;
	private final SubPortElements pSubPort;
	private final ClntPortElements pClntPort;
	private final SrvPortElements pSrvPort;
	private final ReqPortElements pReqPort;
	private final TimeUnitElements pTimeUnit;
	private final TimPortElements pTimPort;
	private final InsPortElements pInsPort;
	private final ComponentFormalElements pComponentFormal;
	private final ActorFormalElements pActorFormal;
	private final ActorElements pActor;
	private final InstanceSectionElements pInstanceSection;
	private final WireElements pWire;
	private final ActualElements pActual;
	private final ActualValueElements pActualValue;
	private final InstanceElements pInstance;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AppGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.INT");
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.DECIMAL");
		this.pFormalDefault = new FormalDefaultElements();
		this.pStringDefault = new StringDefaultElements();
		this.pNumberDefault = new NumberDefaultElements();
		this.pBoolDefault = new BoolDefaultElements();
		this.pNumber = new NumberElements();
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.App.BOOL");
		this.pCollection = new CollectionElements();
		this.pComponentCollection = new ComponentCollectionElements();
		this.pApplication = new ApplicationElements();
		this.pImport = new ImportElements();
		this.pImportedFQN = new ImportedFQNElements();
		this.pFQN = new FQNElements();
		this.pMessageCollection = new MessageCollectionElements();
		this.pMessage = new MessageElements();
		this.pArtifact = new ArtifactElements();
		this.pComponent = new ComponentElements();
		this.pDeviceComponent = new DeviceComponentElements();
		this.pAppComponent = new AppComponentElements();
		this.pMemoryUnits = new MemoryUnitsElements();
		this.pRequirement = new RequirementElements();
		this.pPort = new PortElements();
		this.pPubPort = new PubPortElements();
		this.pSubPort = new SubPortElements();
		this.pClntPort = new ClntPortElements();
		this.pSrvPort = new SrvPortElements();
		this.pReqPort = new ReqPortElements();
		this.pTimeUnit = new TimeUnitElements();
		this.pTimPort = new TimPortElements();
		this.pInsPort = new InsPortElements();
		this.pComponentFormal = new ComponentFormalElements();
		this.pActorFormal = new ActorFormalElements();
		this.pActor = new ActorElements();
		this.pInstanceSection = new InstanceSectionElements();
		this.pWire = new WireElements();
		this.pActual = new ActualElements();
		this.pActualValue = new ActualValueElements();
		this.pInstance = new InstanceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.vanderbilt.riaps.App".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////This is the main model rule
	//Model Mdodel:
	//	{Model}
	//	'package' name=FQN
	//	imports+=Import*
	//	collections+=Collection*
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//FormalDefault:
	//	StringDefault
	//	| NumberDefault
	//	| BoolDefault;
	public FormalDefaultElements getFormalDefaultAccess() {
		return pFormalDefault;
	}
	
	public ParserRule getFormalDefaultRule() {
		return getFormalDefaultAccess().getRule();
	}
	
	//StringDefault:
	//	value=STRING;
	public StringDefaultElements getStringDefaultAccess() {
		return pStringDefault;
	}
	
	public ParserRule getStringDefaultRule() {
		return getStringDefaultAccess().getRule();
	}
	
	//NumberDefault:
	//	value=Number;
	public NumberDefaultElements getNumberDefaultAccess() {
		return pNumberDefault;
	}
	
	public ParserRule getNumberDefaultRule() {
		return getNumberDefaultAccess().getRule();
	}
	
	//BoolDefault:
	//	value=BOOL;
	public BoolDefaultElements getBoolDefaultAccess() {
		return pBoolDefault;
	}
	
	public ParserRule getBoolDefaultRule() {
		return getBoolDefaultAccess().getRule();
	}
	
	//Number hidden():
	//	(INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//terminal BOOL:
	//	'true' | 'false';
	public TerminalRule getBOOLRule() {
		return tBOOL;
	}
	
	//// These are the real FCO
	//Collection:
	//	MessageCollection
	//	| ComponentCollection
	//	| Application;
	public CollectionElements getCollectionAccess() {
		return pCollection;
	}
	
	public ParserRule getCollectionRule() {
		return getCollectionAccess().getRule();
	}
	
	//ComponentCollection:
	//	{ComponentCollection}
	//	'componentCollection' name=ID '{'
	//	components+=Component*
	//	'}';
	public ComponentCollectionElements getComponentCollectionAccess() {
		return pComponentCollection;
	}
	
	public ParserRule getComponentCollectionRule() {
		return getComponentCollectionAccess().getRule();
	}
	
	//Application:
	//	{Application}
	//	'application' name=ID ('extends' baseapp=[Application|FQN])?
	//	'{' (artifacts+=Artifact | actors+=Actor | components+=Component | messages+=Message)*
	//	'}';
	public ApplicationElements getApplicationAccess() {
		return pApplication;
	}
	
	public ParserRule getApplicationRule() {
		return getApplicationAccess().getRule();
	}
	
	//Import:
	//	'import' importedNamespace=ImportedFQN;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//ImportedFQN:
	//	FQN ('.' '*')?;
	public ImportedFQNElements getImportedFQNAccess() {
		return pImportedFQN;
	}
	
	public ParserRule getImportedFQNRule() {
		return getImportedFQNAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	////Now this is the real section of component description
	//MessageCollection:
	//	{MessageCollection}
	//	'messageCollection' name=ID '{'
	//	messages+=Message*
	//	'}';
	public MessageCollectionElements getMessageCollectionAccess() {
		return pMessageCollection;
	}
	
	public ParserRule getMessageCollectionRule() {
		return getMessageCollectionAccess().getRule();
	}
	
	//Message:
	//	'message' name=ID ':' type=[DataTypes::FStructType|FQN] ('key' key=[DataTypes::FField|FQN])? ';'?;
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}
	
	/// *
	// * Rule to create (software) artifact. Artifacts can have dependencies. 
	// * All artifacts are always found in RIAPSAPPS/artifacts folder
	// * 
	// * / Artifact:
	//	(jar?='jar' | sharedObject?='sharedObject' | configurationFile?='file') name=ID ':' path=STRING ';'?;
	public ArtifactElements getArtifactAccess() {
		return pArtifact;
	}
	
	public ParserRule getArtifactRule() {
		return getArtifactAccess().getRule();
	}
	
	//Component:
	//	AppComponent | DeviceComponent;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//DeviceComponent:
	//	'device' name=ID ('(' formals+=ComponentFormal (',' formals+=ComponentFormal)* ')')?
	//	'{' (requirements+=Requirement | ports+=Port)+
	//	'}';
	public DeviceComponentElements getDeviceComponentAccess() {
		return pDeviceComponent;
	}
	
	public ParserRule getDeviceComponentRule() {
		return getDeviceComponentAccess().getRule();
	}
	
	//// Component types used in the application
	//AppComponent:
	//	'component' name=ID ('(' formals+=ComponentFormal (',' formals+=ComponentFormal)* ')')?
	//	'{' (requirements+=Requirement | ports+=Port)+
	//	'}';
	public AppComponentElements getAppComponentAccess() {
		return pAppComponent;
	}
	
	public ParserRule getAppComponentRule() {
		return getAppComponentAccess().getRule();
	}
	
	/// *
	// * Rule that defines different supported memory units. 
	// * / MemoryUnits:
	//	kb?='KB'
	//	| mb?='MB'
	//	| gb?="GB";
	public MemoryUnitsElements getMemoryUnitsAccess() {
		return pMemoryUnits;
	}
	
	public ParserRule getMemoryUnitsRule() {
		return getMemoryUnitsAccess().getRule();
	}
	
	//Requirement:
	//	'requires' ('artifact' artifactrequirement=[Artifact|FQN] | 'memory' memoryRequirement=INT memoryunit=MemoryUnits |
	//	'storage' storageRequirement=INT storageunit=MemoryUnits | 'device' deviceRequirement=STRING) ';'?;
	public RequirementElements getRequirementAccess() {
		return pRequirement;
	}
	
	public ParserRule getRequirementRule() {
		return getRequirementAccess().getRule();
	}
	
	//Port:
	//	PubPort
	//	| SubPort
	//	| ClntPort
	//	| SrvPort
	//	| ReqPort
	//	| TimPort
	//	| InsPort;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//PubPort:
	//	'pub' name=ID ':' type=[Message|FQN] ';'?;
	public PubPortElements getPubPortAccess() {
		return pPubPort;
	}
	
	public ParserRule getPubPortRule() {
		return getPubPortAccess().getRule();
	}
	
	//SubPort:
	//	'sub' name=ID ':' type=[Message|FQN] ';'?;
	public SubPortElements getSubPortAccess() {
		return pSubPort;
	}
	
	public ParserRule getSubPortRule() {
		return getSubPortAccess().getRule();
	}
	
	//// Client port (request and reply message types) - Owned by an SMI client
	//// Client operation is expected to send on the port and then receive on the same port
	//ClntPort:
	//	'clt' name=ID ':' '(' req_type=[Message|FQN] ',' rep_type=[Message|FQN] ')' ';'?;
	public ClntPortElements getClntPortAccess() {
		return pClntPort;
	}
	
	public ParserRule getClntPortRule() {
		return getClntPortAccess().getRule();
	}
	
	//SrvPort:
	//	'srv' name=ID ':' '(' req_type=[Message|FQN] ',' rep_type=[Message|FQN] ')' ';'?;
	public SrvPortElements getSrvPortAccess() {
		return pSrvPort;
	}
	
	public ParserRule getSrvPortRule() {
		return getSrvPortAccess().getRule();
	}
	
	//ReqPort:
	//	'req' name=ID ':' '(' req_type=[Message|FQN] ',' rep_type=[Message|FQN] ')' ';'?;
	public ReqPortElements getReqPortAccess() {
		return pReqPort;
	}
	
	public ParserRule getReqPortRule() {
		return getReqPortAccess().getRule();
	}
	
	/// *
	// * Rule that defines different supported time units.
	// * / TimeUnit:
	//	months?='months'
	//	| days?='days'
	//	| seconds?='s'
	//	| milliseconds?='ms'
	//	| nanoseconds?='ns'
	//	| microseconds?='mus';
	public TimeUnitElements getTimeUnitAccess() {
		return pTimeUnit;
	}
	
	public ParserRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}
	
	//TimPort:
	//	'timer' name=ID (spec=Number unit=TimeUnit) ';'?;
	public TimPortElements getTimPortAccess() {
		return pTimPort;
	}
	
	public ParserRule getTimPortRule() {
		return getTimPortAccess().getRule();
	}
	
	//// Inside port
	//InsPort:
	//	'inside' name=ID spec?='default'? ';'?;
	public InsPortElements getInsPortAccess() {
		return pInsPort;
	}
	
	public ParserRule getInsPortRule() {
		return getInsPortAccess().getRule();
	}
	
	//ComponentFormal:
	//	name=ID ('=' argDefault=FormalDefault);
	public ComponentFormalElements getComponentFormalAccess() {
		return pComponentFormal;
	}
	
	public ParserRule getComponentFormalRule() {
		return getComponentFormalAccess().getRule();
	}
	
	//ActorFormal:
	//	name=ID ('=' argDefault=FormalDefault);
	public ActorFormalElements getActorFormalAccess() {
		return pActorFormal;
	}
	
	public ParserRule getActorFormalRule() {
		return getActorFormalAccess().getRule();
	}
	
	//Actor:
	//	'actor' name=ID ('(' formals+=ActorFormal (',' formals+=ActorFormal)* ')')?
	//	'{' ('local' locals+=[Message|FQN] (',' locals+=[Message|FQN])* ';'?)? ('internal' internals+=[Message|FQN] (','
	//	internals+=[Message|FQN])* ';'?)? // Optional: internal messages (stay within the actor)
	//	compsection=InstanceSection
	//	wires+=Wire*
	//	'}';
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	//// Wiring of clients to servers (both SMI and AMI)
	//InstanceSection:
	//	{InstanceSection}
	//	'{'
	//	instances+=Instance+
	//	'}';
	public InstanceSectionElements getInstanceSectionAccess() {
		return pInstanceSection;
	}
	
	public ParserRule getInstanceSectionRule() {
		return getInstanceSectionAccess().getRule();
	}
	
	//Wire:
	//	{Wire} (clnt=[ClntPort|FQN] '=' server=[SrvPort|FQN] | ami?='ami' req=[ReqPort|FQN] '=' server=[SrvPort|FQN]) ';'?;
	public WireElements getWireAccess() {
		return pWire;
	}
	
	public ParserRule getWireRule() {
		return getWireAccess().getRule();
	}
	
	//Actual:
	//	argName=[ComponentFormal|FQN] '=' argValue=ActualValue;
	public ActualElements getActualAccess() {
		return pActual;
	}
	
	public ParserRule getActualRule() {
		return getActualAccess().getRule();
	}
	
	//ActualValue:
	//	stringdefault=StringDefault | numberdefault=NumberDefault | boolDefault=BoolDefault | param=[ActorFormal|FQN];
	public ActualValueElements getActualValueAccess() {
		return pActualValue;
	}
	
	public ParserRule getActualValueRule() {
		return getActualValueAccess().getRule();
	}
	
	//Instance:
	//	name=ID ':' type=[Component|FQN] ('(' actuals+=Actual (',' actuals+=Actual)* ')')? ';'?;
	public InstanceElements getInstanceAccess() {
		return pInstance;
	}
	
	public ParserRule getInstanceRule() {
		return getInstanceAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
