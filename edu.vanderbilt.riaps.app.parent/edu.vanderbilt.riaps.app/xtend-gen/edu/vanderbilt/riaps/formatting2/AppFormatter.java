/**
 * generated by Xtext 2.10.0
 */
package edu.vanderbilt.riaps.formatting2;

import com.google.inject.Inject;
import edu.vanderbilt.riaps.app.Actor;
import edu.vanderbilt.riaps.app.Application;
import edu.vanderbilt.riaps.app.Artifact;
import edu.vanderbilt.riaps.app.Collection;
import edu.vanderbilt.riaps.app.Component;
import edu.vanderbilt.riaps.app.ComponentCollection;
import edu.vanderbilt.riaps.app.Import;
import edu.vanderbilt.riaps.app.Instance;
import edu.vanderbilt.riaps.app.InstanceSection;
import edu.vanderbilt.riaps.app.Message;
import edu.vanderbilt.riaps.app.MessageCollection;
import edu.vanderbilt.riaps.app.Model;
import edu.vanderbilt.riaps.app.Port;
import edu.vanderbilt.riaps.app.Requirement;
import edu.vanderbilt.riaps.app.Wire;
import edu.vanderbilt.riaps.services.AppGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegionsFinder;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class AppFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private AppGrammarAccess _appGrammarAccess;
  
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    EList<Import> _imports = model.getImports();
    for (final Import imports : _imports) {
      {
        document.<Import>format(imports);
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        Import _prepend = document.<Import>prepend(imports, _function);
        final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        document.<Import>append(_prepend, _function_1);
      }
    }
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    Model _prepend = document.<Model>prepend(model, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    document.<Model>append(_prepend, _function_1);
    EList<Collection> _collections = model.getCollections();
    for (final Collection collection : _collections) {
      {
        if ((collection instanceof MessageCollection)) {
          document.<MessageCollection>format(((MessageCollection) collection));
        }
        if ((collection instanceof ComponentCollection)) {
          document.<ComponentCollection>format(((ComponentCollection) collection));
        }
        if ((collection instanceof Application)) {
          document.<Application>format(((Application) collection));
        }
      }
    }
  }
  
  protected void _format(final MessageCollection collection, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(collection);
    ISemanticRegion _keyword = _regionFor.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    ISemanticRegion _prepend = document.prepend(_keyword, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    final ISemanticRegion open = document.append(_prepend, _function_1);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(collection);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    ISemanticRegion _prepend_1 = document.prepend(_keyword_1, _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    final ISemanticRegion close = document.append(_prepend_1, _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_4);
    EList<Message> _messages = collection.getMessages();
    for (final Message elements : _messages) {
      {
        document.<Message>format(elements);
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        Message _prepend_2 = document.<Message>prepend(elements, _function_5);
        final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        document.<Message>append(_prepend_2, _function_6);
      }
    }
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    MessageCollection _prepend_2 = document.<MessageCollection>prepend(collection, _function_5);
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    document.<MessageCollection>append(_prepend_2, _function_6);
  }
  
  protected void _format(final Application app, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(app);
    ISemanticRegion _keyword = _regionFor.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    ISemanticRegion _prepend = document.prepend(_keyword, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    final ISemanticRegion open = document.append(_prepend, _function_1);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(app);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    ISemanticRegion _prepend_1 = document.prepend(_keyword_1, _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    final ISemanticRegion close = document.append(_prepend_1, _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_4);
    EList<Component> _components = app.getComponents();
    for (final Component component : _components) {
      {
        document.<Component>format(component);
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        Component _prepend_2 = document.<Component>prepend(component, _function_5);
        final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        document.<Component>append(_prepend_2, _function_6);
      }
    }
    EList<Artifact> _artifacts = app.getArtifacts();
    for (final Artifact artifact : _artifacts) {
      {
        document.<Artifact>format(artifact);
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        Artifact _prepend_2 = document.<Artifact>prepend(artifact, _function_5);
        final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        document.<Artifact>append(_prepend_2, _function_6);
      }
    }
    EList<Message> _messages = app.getMessages();
    for (final Message elements : _messages) {
      {
        document.<Message>format(elements);
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        Message _prepend_2 = document.<Message>prepend(elements, _function_5);
        final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        document.<Message>append(_prepend_2, _function_6);
      }
    }
    EList<Actor> _actors = app.getActors();
    for (final Actor actor : _actors) {
      {
        document.<Actor>format(actor);
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        Actor _prepend_2 = document.<Actor>prepend(actor, _function_5);
        final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        document.<Actor>append(_prepend_2, _function_6);
      }
    }
  }
  
  protected void _format(final ComponentCollection collection, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(collection);
    ISemanticRegion _keyword = _regionFor.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    ISemanticRegion _prepend = document.prepend(_keyword, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    final ISemanticRegion open = document.append(_prepend, _function_1);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(collection);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    ISemanticRegion _prepend_1 = document.prepend(_keyword_1, _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    final ISemanticRegion close = document.append(_prepend_1, _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_4);
    EList<Component> _components = collection.getComponents();
    for (final Component components : _components) {
      document.<Component>format(components);
    }
  }
  
  protected void _format(final Component component, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(component);
    ISemanticRegion _keyword = _regionFor.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    ISemanticRegion _prepend = document.prepend(_keyword, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    final ISemanticRegion open = document.append(_prepend, _function_1);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(component);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    ISemanticRegion _prepend_1 = document.prepend(_keyword_1, _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    final ISemanticRegion close = document.append(_prepend_1, _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_4);
    EList<Requirement> _requirements = component.getRequirements();
    for (final Requirement re : _requirements) {
      {
        document.<Requirement>format(re);
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        Requirement _prepend_2 = document.<Requirement>prepend(re, _function_5);
        final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        document.<Requirement>append(_prepend_2, _function_6);
      }
    }
    EList<Port> _ports = component.getPorts();
    for (final Port port : _ports) {
      {
        document.<Port>format(port);
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        Port _prepend_2 = document.<Port>prepend(port, _function_5);
        final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        document.<Port>append(_prepend_2, _function_6);
      }
    }
  }
  
  protected void _format(final InstanceSection actor, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(actor);
    ISemanticRegion _keyword = _regionFor.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    ISemanticRegion _prepend = document.prepend(_keyword, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    final ISemanticRegion open = document.append(_prepend, _function_1);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(actor);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    ISemanticRegion _prepend_1 = document.prepend(_keyword_1, _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    final ISemanticRegion close = document.append(_prepend_1, _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_4);
    EList<Instance> _instances = actor.getInstances();
    for (final Instance instance : _instances) {
      {
        document.<Instance>format(instance);
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        Instance _prepend_2 = document.<Instance>prepend(instance, _function_5);
        final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        document.<Instance>append(_prepend_2, _function_6);
      }
    }
  }
  
  protected void _format(final Actor actor, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(actor);
    ISemanticRegion _keyword = _regionFor.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    ISemanticRegion _prepend = document.prepend(_keyword, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    final ISemanticRegion open = document.append(_prepend, _function_1);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(actor);
    ISemanticRegion _keyword_1 = _regionFor_1.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    ISemanticRegion _prepend_1 = document.prepend(_keyword_1, _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    final ISemanticRegion close = document.append(_prepend_1, _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_4);
    EList<Message> _locals = actor.getLocals();
    for (final Message entry : _locals) {
      {
        document.<Message>format(entry);
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        Message _prepend_2 = document.<Message>prepend(entry, _function_5);
        final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        document.<Message>append(_prepend_2, _function_6);
      }
    }
    InstanceSection _compsection = actor.getCompsection();
    document.<InstanceSection>format(_compsection);
    InstanceSection _compsection_1 = actor.getCompsection();
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    InstanceSection _prepend_2 = document.<InstanceSection>prepend(_compsection_1, _function_5);
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
      it.newLine();
    };
    document.<InstanceSection>append(_prepend_2, _function_6);
    EList<Message> _internals = actor.getInternals();
    for (final Message entry_1 : _internals) {
      {
        document.<Message>format(entry_1);
        final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        Message _prepend_3 = document.<Message>prepend(entry_1, _function_7);
        final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        document.<Message>append(_prepend_3, _function_8);
      }
    }
    EList<Wire> _wires = actor.getWires();
    for (final Wire entry_2 : _wires) {
      {
        document.<Wire>format(entry_2);
        final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        Wire _prepend_3 = document.<Wire>prepend(entry_2, _function_7);
        final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
          it.newLine();
        };
        document.<Wire>append(_prepend_3, _function_8);
      }
    }
  }
  
  public void format(final Object app, final IFormattableDocument document) {
    if (app instanceof XtextResource) {
      _format((XtextResource)app, document);
      return;
    } else if (app instanceof Application) {
      _format((Application)app, document);
      return;
    } else if (app instanceof ComponentCollection) {
      _format((ComponentCollection)app, document);
      return;
    } else if (app instanceof MessageCollection) {
      _format((MessageCollection)app, document);
      return;
    } else if (app instanceof Model) {
      _format((Model)app, document);
      return;
    } else if (app instanceof Actor) {
      _format((Actor)app, document);
      return;
    } else if (app instanceof Component) {
      _format((Component)app, document);
      return;
    } else if (app instanceof InstanceSection) {
      _format((InstanceSection)app, document);
      return;
    } else if (app instanceof EObject) {
      _format((EObject)app, document);
      return;
    } else if (app == null) {
      _format((Void)null, document);
      return;
    } else if (app != null) {
      _format(app, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(app, document).toString());
    }
  }
}
