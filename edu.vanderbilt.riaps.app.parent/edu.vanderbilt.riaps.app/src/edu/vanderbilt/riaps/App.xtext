grammar edu.vanderbilt.riaps.App with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate app "http://www.vanderbilt.edu/riaps/App"
//This is the main model rule
Model returns Mdodel:
	{Model}
	//'package' name=FQN (';')
	//(imports+=Import)*
	(collections+=Application)*;
	

Import:
	'import' (importedNamespace=ImportedFQN) (';');

ImportedFQN:
	FQN ('.' '*')?;

FQN:
	ID ('.' ID)*;
	////////////////////////////////////////////////////////////////	
//These are the terminal Rules	
@Override
terminal INT returns ecore::EInt:
	'0'..'9' ('0'..'9' | '_')*;

terminal DECIMAL:
	INT
	(('e' | 'E') ('+' | '-')? INT)?
	(('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;

FormalDefault:
	StringDefault
	| NumberDefault
	| BoolDefault;

StringDefault:
	value=STRING;

NumberDefault:
	value=Number;

BoolDefault:
	value=BOOL;

Number hidden():
	(INT | DECIMAL) ('.' (INT | DECIMAL))?;

terminal BOOL:
	'true' | 'false';

//A collection defines the top level entries in the riaps file.
// These can just be component definitions or application definitions.

//Disabling messages at the top
Collection:
	Application	
	| FType;

FType returns FType:
	FEnumerationType |
	FStructType;

FStructType returns FStructType:
//A message can only refer to a structure.	
	{FStructType} 'struct' name=ID '{' (elements+=FField)* '}';

FField:
//the [] declares a filed to be an array
	name=ID ':' type=FTypeRef (list?='[' ']')? (';');

FTypeRef returns FTypeRef:
//These are references to types.
	predefined=FBasicTypeId | derived=[FType|FQN];

enum FBasicTypeId returns FBasicTypeId:
//These are the basic types that are supported by the datatypes language
	Int8='Int8' |
	UInt8='UInt8' |
	Int16='Int16' |
	UInt16='UInt16' |
	Int32='Int32' |
	UInt32='UInt32' |
	Int64='Int64' |
	UInt64='UInt64' |
	Boolean='Boolean' |
	String='String' |
	Float='Float' |
	Double='Double' |
	Char='Char' |
	ByteBuffer='ByteBuffer';

	//We support enumerations as well. A structure can have a field that is an enumeration.	
FEnumerationType returns FEnumerationType:
	{FEnumerationType}
	'enumeration' name=ID
	'{'
	(enumerators+=FEnumerator (','? enumerators+=FEnumerator)*) (';')
	'}';

FEnumerator returns FEnumerator:
	{FEnumerator}
	name=ID ('=' value=STRING)?;

Message:
	'message' name=ID 
	(':' type=[FStructType|FQN])? 
	(';'?);
	//The device types and their tags will be captured in datatypes. A different place for them can be found later.
//for crossreference 

//enum SupportLanguages returns SupportLanguages:
//	python ='python'|
//	py='py'|
//	cpp='cpp'
//;



//// Component implementation language
//Language:
//	cppImpl ?= ('c++' | 'cpp' | 'C++')  | pyImpl ?=  ( 'Python' | 'python' | 'py' ) 
//; 

// This is an application component
// we capture its ports and its requirements.
// Component types used in the application
Component:	
	(appComponent?='component' | ioComponent?='device') name=ID 
	('()' | ('(' formals+=ComponentFormal (',' formals+=ComponentFormal)* ')')?)
	 ('in'	(cpp?='c++'|cpp?='cpp'|cpp?='C++'|py?='Python'|py?='py'|py?='python'))?
	//('from' reuselib=Library)? 
	'{'
	// A component can first declare several requirements. It then declares the ports that it provides.
	((ports+=Port))+
	// A component must have atleast one port 
	'}';

exceptionHandler:
	IGNORE | EXIT | NAMEDHANDLER;

NAMEDHANDLER:
	{NAMEDHANDLER}
	'except' name=ID (';');

IGNORE:
	{IGNORE}
	'ignore' (';');

EXIT:
	{EXIT}
	'exit' (';');



	/*
 * Rule that defines different supported time units.
 */
TimeUnit:
	second?='sec'
	|minute?='min'
	| millisecond?='msec'
	//| microsecond?='usec'
	;

terminal LIBRARY_NAME:
	'lib' ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* ('.so');

//terminal FILE_NAME  		: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*(('.')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*);

clibrary:
	name=LIBRARY_NAME
;

pylibrary:
	name=ID
;

LibraryReq:
	('library')? lib=(pylibrary|clibrary) ';';

Configuration:
	'file' (name=STRING);

	// Rate limits can be specified on ports.
Port:
	PubPort
	| SubPort
	| ClntPort
	| SrvPort
	| ReqPort
	| RepPort
	| TimPort
	| QueryPort
	| AnswerPort
	| InsPort;

QueryPort:
	'qry' name=ID ':' '(' req_type=[Message|FQN] ',' rep_type=[Message|FQN] ')' (timed?='timed')? ( 'within' deadline=INT (unit=TimeUnit)? )?  (';');

AnswerPort:
	'ans' name=ID ':' '(' req_type=[Message|FQN] ',' rep_type=[Message|FQN] ')'
	(timed?='timed')? ( 'within' deadline=INT (unit=TimeUnit)? )?  (';');

RateLimit:
	'[' (lower=INT | nolower?='-') ',' (upper=INT | noupper?='-') ']';

	//Rate limits are optional
PubPort:
	'pub' name=ID ':' type=[Message|FQN] (timed?='timed')?  (';');

SubPort:
	'sub' name=ID ':' type=[Message|FQN] (timed?='timed')? 
  	( 'within' deadline=INT (unit=TimeUnit)? )?  (';');

 

	// Client port (request and reply message types) - Owned by an SMI client
// Client operation is expected to send on the port and then receive on the same port
ClntPort:
	'clt' name=ID ':' '(' req_type=[Message|FQN] ',' rep_type=[Message|FQN] ')' (timed?='timed')?  (';');

SrvPort:
	'srv' name=ID ':' '(' req_type=[Message|FQN] ',' rep_type=[Message|FQN] ')'
	(timed?='timed')? ( 'within' deadline=INT (unit=TimeUnit)? )?  (';');

ReqPort:
	'req' name=ID ':' '(' req_type=[Message|FQN] ',' rep_type=[Message|FQN] ')' (timed?='timed')? ( 'within' deadline=INT (unit=TimeUnit)? )?  (';');

RepPort:
	'rep' name=ID ':' '(' req_type=[Message|FQN] ',' rep_type=[Message|FQN] ')'
	(timed?='timed')? ( 'within' deadline=INT (unit=TimeUnit)? )?  (';');

TimPort:
	'timer' name=ID (spec=INT (unit=TimeUnit)?)? ('within' (within=INT (withinunit=TimeUnit)?))?  (';');

	//Inside port
InsPort:
	'inside' name=ID (spec?='default')? (';');

ComponentUses:
	{ComponentUses}
	'uses'
	'{'
	(requirements+=ComponentRequirement (';'))+
	'}';

	/*
 * Rule that defines different supported memory units. 
 */
MemoryUnits:
	kb?='KB'
	| mb?='MB'
	| gb?="GB";

	//An application component can request a specific device. But It will need to talk via a device component running on the same 
// node that also requires the same device. Here the requirement captures a device identifier that can be specialized to 
// identify a subtag for a device for example PMU.north. In this case the device type is PMU. The north is a tag that can be hierarchically matched
// against the computation node that supports that device.
// TODO DeviceTypes might have to be defined in datatypes
ComponentRequirement:
	 Configuration | CPURequirement  | NetworkRequirement;

NetworkRequirement:
//	'net' (max?='max')? usage=INT (memUnit=MemUnit)? ( 'over' interval=INT (timeUnit=TimeUnit)? )? 
	'net' 'rate' rate=Number rateUnit=RateUnit 
			( 'ceil' ceil=Number ceilUnit=RateUnit )? 
			( 'burst' burst=Number burstUnit=BurstUnit )?
;
	
	
	
CPURequirement:
	'cpu' (max?='max')? percentage=INT '%' ('over' TimeInterval=INT (unit=TimeUnit)? )?;

Application returns Application:
	{Application}
	'app' (name=ID)
	'{'
	//declare the libraries, actors, components (app-specific components - an app's actor can use components described in a non-app namespace)
	((actors+=Actor) | (components+=Component) | (libraries+=LibraryReq)| 
	//(libraries+=Library)| (groups+=Group) |
		 messages+=Message
	)+

	//Optionally deployment constraints can be specified to control how an app is deployed.
	// the constraints are specified by the app developer
//	(deploymentConstraints+=DeploymentConstraint)*
	'}';

Group:
	'group' name=ID 
	('uses' groupProperty+=GroupProperty(','  groupProperty+=GroupProperty)*)? (';')	
;

GroupProperty:
	Leader
	|Consensus
;

Leader:
	{Leader}
	hasLeader?=('leader');

Consensus:
	{Consensus}
	hasConsensus?=('consensus');


DeploymentConstraint:
	CollocateConstraint | DistributeConstraint;

CollocateConstraint:
	'collocate' actorcollocatelist+=[Actor|FQN] ',' actorcollocatelist+=[Actor|FQN] (',' actorcollocatelist+=[Actor|FQN])*
	(';'?);

DistributeConstraint:
	'distribute' actordistributelist+=[Actor|FQN] ',' actordistributelist+=[Actor|FQN] (','
	actordistributelist+=[Actor|FQN])* (';'?);

ComponentFormal:
	name=ID (('=' argDefault=FormalDefault)?);

ActorFormal:
	name=ID (('=' argDefault=FormalDefault)?);

Actor:
	'actor' name=ID ('()' | ('(' formals+=ActorFormal (',' formals+=ActorFormal)* ')')?)
	'{'
	(('local' locals+=[Message|FQN] (',' locals+=[Message|FQN])* (';')) 
	| ('internal' internals+=[Message|FQN] (',' internals+=[Message|FQN])* (';')))*
	((constraint=ActorUses)?)
	compsection=InstanceSection
	'}';

ActorUses:
	{ActorUses}
	'uses'
	'{'
	(requirements+=ActorRequirement (';'))*
	'}';

RestartSpec:
	{RestartSpec}
	'restart' (maxtries=INT)? ('delay' delay=INT unit=TimeUnit)? (';');

ActorRequirement:
	MemoryRequirement |CPURequirement| StorageRequirement |NetworkRequirement;

MemoryRequirement:
	'mem' Number=INT ( unit=MemUnit )?;

MemUnit:
	megabytes?='mb' | kilobytes?='kb' | gigabytes?='gb'
;
 

StorageRequirement:
	'space' Number=INT ( unit=MemUnit )?
	
	;
	// Wiring of clients to servers (both SMI and AMI)
InstanceSection returns InstanceSection:
	{InstanceSection}
	'{'
	(compInstances+=Instance)+
	'}';

RateUnit:
	kbps?='kbps' | mbps?='mbps' 
;


BurstUnit:
	kilo?='k' | kilbyte?='kb'
;

Actual returns Actual:
	{Actual} argName=[ComponentFormal|FQN] '=' (tringdefault=StringDefault | numberdefault=NumberDefault |
	boolDefault=BoolDefault | argValue=[ActorFormal|FQN]);

	//ActualValue:
//	(stringdefault=StringDefault | numberdefault=NumberDefault | boolDefault=BoolDefault | param=[ActorFormal|FQN]);
Instance:
	name=ID ':' type=[Component|FQN] ('()' | ('(' actuals+=Actual (',' (actuals+=Actual))* ')'))? (';');


	