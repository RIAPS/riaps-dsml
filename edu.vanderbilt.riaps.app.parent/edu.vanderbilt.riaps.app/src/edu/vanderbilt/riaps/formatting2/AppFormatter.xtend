/*
 * generated by Xtext 2.10.0
 */
package edu.vanderbilt.riaps.formatting2

import com.google.inject.Inject
import edu.vanderbilt.riaps.app.Collection
import edu.vanderbilt.riaps.app.Component

import edu.vanderbilt.riaps.app.Import
import edu.vanderbilt.riaps.app.Model
import edu.vanderbilt.riaps.services.AppGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import edu.vanderbilt.riaps.app.MessageRef
import edu.vanderbilt.riaps.app.Application
import edu.vanderbilt.riaps.app.Actor
import edu.vanderbilt.riaps.app.Artifact
import edu.vanderbilt.riaps.app.InstanceSection
import edu.vanderbilt.riaps.app.DeploymentConstraint

class AppFormatter extends AbstractFormatter2 {

	@Inject extension AppGrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Import imports : model.getImports()) {
			imports.format;
			imports.prepend[noSpace; newLine].append[noSpace; newLine]
		}
		model.prepend[noSpace].append[noSpace; newLine]

		for (collection : model.getCollections()) {
			if (collection instanceof MessageRef)
				(collection as MessageRef).format
			if (collection instanceof Component)
				(collection as Component).format
			if (collection instanceof Application)
				(collection as Application).format
		}
	}

//	def dispatch void format(MessageCollection collection, extension IFormattableDocument document) {
////		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
//		val open = collection.regionFor.keyword("{").prepend[noSpace; newLine].append[noSpace; newLine]
//		val close = collection.regionFor.keyword("}").prepend[noSpace; newLine].append[noSpace; newLine]
//		interior(open, close)[indent]
//		for (Message elements : collection.getMessages()) {
//			elements.format;
//			elements.prepend[noSpace; newLine].append[noSpace; newLine]
//		}
//
//		collection.prepend[noSpace; newLine].append[noSpace; newLine]
//
//	}

	def dispatch void format(Application app, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		val open = app.regionFor.keyword("{").prepend[noSpace; newLine].append[noSpace; newLine]
		val close = app.regionFor.keyword("}").prepend[noSpace; newLine].append[noSpace; newLine]
		interior(open, close)[indent]
		for (Component component : app.getComponents()) {
			component.format;
			component.prepend[noSpace; newLine].append[noSpace; newLine]
		}
		for (Artifact artifact : app.getArtifacts()) {
			artifact.format
			artifact.prepend[noSpace; newLine].append[noSpace; newLine]

		}
		for (MessageRef elements : app.getMessages()) {
			elements.format;
			elements.prepend[noSpace; newLine].append[noSpace; newLine]
		}
		for (Actor actor : app.getActors()) {
			actor.format;
			actor.prepend[noSpace; newLine].append[noSpace; newLine]
		}
		for(DeploymentConstraint c: app.deploymentConstraints){
			c.format;
			c.prepend[noSpace; newLine].append[noSpace; newLine]
		}

	}

//	def dispatch void format(ComponentCollection collection, extension IFormattableDocument document) {
//		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
//		val open = collection.regionFor.keyword("{").prepend[noSpace; newLine].append[noSpace; newLine]
//		val close = collection.regionFor.keyword("}").prepend[noSpace; newLine].append[noSpace; newLine]
//		interior(open, close)[indent]
//		for (Component components : collection.getComponents()) {
//			components.format;
//		}
//	}

	def dispatch void format(Component component, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		val open = component.regionFor.keyword("{").prepend[noSpace; newLine].append[noSpace; newLine]
		val close = component.regionFor.keyword("}").prepend[noSpace; newLine].append[noSpace; newLine]
		interior(open, close)[indent]
		for (re : component.requirements) {
			re.format
			re.prepend[noSpace; newLine].append[noSpace; newLine]
		}
		for (port : component.ports) {
			port.format
			port.prepend[noSpace; newLine].append[noSpace; newLine]
		}

	}

	def dispatch void format(InstanceSection actor, extension IFormattableDocument document) {
		val open = actor.regionFor.keyword("{").prepend[noSpace; newLine].append[noSpace; newLine]
		val close = actor.regionFor.keyword("}").prepend[noSpace; newLine].append[noSpace; newLine]
		interior(open, close)[indent]
		for (instance : actor.instances) {
			instance.format
			instance.prepend[noSpace; newLine].append[noSpace; newLine]
		}
	}

	def dispatch void format(Actor actor, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		val open = actor.regionFor.keyword("{").prepend[noSpace; newLine].append[noSpace; newLine]
		val close = actor.regionFor.keyword("}").prepend[noSpace; newLine].append[noSpace; newLine]
		interior(open, close)[indent]

		for (entry : actor.locals) {
			entry.format
			entry.prepend[noSpace; newLine].append[noSpace; newLine]
		}
		actor.compsection.format
		actor.compsection.prepend[noSpace; newLine].append[noSpace; newLine]

		for (entry : actor.internals) {
			entry.format
			entry.prepend[noSpace; newLine].append[noSpace; newLine]
		}
		
		for (entry : actor.criticals) {
			entry.format
			entry.prepend[noSpace; newLine].append[noSpace; newLine]
		}
		for (entry : actor.wires) {
			entry.format
			entry.prepend[noSpace; newLine].append[noSpace; newLine]
		}

	}

// TODO: implement for application, MessageCollection, DeviceComponent, AppComponent, ComponentFormal, ActorFormal, Actor, Actual, ActualValue, Instance
}
