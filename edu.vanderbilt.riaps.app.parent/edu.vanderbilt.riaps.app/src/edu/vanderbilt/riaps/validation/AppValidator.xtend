/*
 * generated by Xtext 2.10.0
 */
package edu.vanderbilt.riaps.validation

import org.eclipse.xtext.validation.Check
import edu.vanderbilt.riaps.app.AppPackage
import edu.vanderbilt.riaps.app.Group
import edu.vanderbilt.riaps.app.Leader
import edu.vanderbilt.riaps.app.Consensus
import java.util.HashSet
import edu.vanderbilt.riaps.app.Component
import edu.vanderbilt.riaps.app.Actor
import edu.vanderbilt.riaps.app.Application
import edu.vanderbilt.riaps.app.Library
import edu.vanderbilt.riaps.app.Configuration
import org.eclipse.core.runtime.Path
import edu.vanderbilt.riaps.app.FStructType
import edu.vanderbilt.riaps.app.Message
import edu.vanderbilt.riaps.app.FEnumerationType
import edu.vanderbilt.riaps.app.FEnumerator
import edu.vanderbilt.riaps.app.Model
import edu.vanderbilt.riaps.app.FField
import edu.vanderbilt.riaps.Console

/** 
 * This class contains custom validation rules. 
 *  
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class AppValidator extends AbstractAppValidator {

	public static val INVALID_NAME = 'invalidName'

	@Check
	def checkFStructTypeStartsWithCapital(FStructType message) {
		if (!Character.isUpperCase(message.name.charAt(0))) {
			warning('Name should start with a capital', AppPackage.Literals.COLLECTION__NAME) 
		}

	}

//	@Check
//	def checkDeviceTypeNoReuseWithinApp(DeviceType dev) {
//		if (dev.eContainer instanceof Application) {
//			if (dev.reuselib !== null) {
//				error('A device within an application cannot be imported from a library',
//					AppPackage.Literals.COLLECTION__NAME)
//			}
//		}
//	}

	/*@Check
	def checkComponentTypeNoReuseWithinApp(Component dev) {
		if (dev.eContainer instanceof Application) {
			if (dev.getReuselib() !== null) {
				error('A device within an application cannot be imported from a library',
					AppPackage.Literals.COLLECTION__NAME)
			}
		}
	}*/

	@Check
	def checkFStructNameDoesNotContainUnderscore(FStructType message) {
		if (message.name.contains('_')) {
			error('Name cannot contain underscore', AppPackage.Literals.COLLECTION__NAME)
		}

	}

	@Check
	def checkEnumNameDoesNotContainUnderscore(FEnumerationType message) {
		if (message.name.contains('_')) {
			error('Name cannot contain underscore', AppPackage.Literals.COLLECTION__NAME)
		}

	}

	@Check
	def checkEnumStartsWithCapital(FEnumerationType message) {
		if (!Character.isUpperCase(message.name.charAt(0))) {
			warning('Name should start with a capital', AppPackage.Literals.COLLECTION__NAME)
		}

	}

	@Check
	def checkEnumStartsWithCapital(FEnumerator message) {
		if (!Character.isLowerCase(message.name.charAt(0))) {
			error('Name should start with a lower case letter', AppPackage.Literals.FENUMERATOR__NAME)
		}

	}

	@Check
	def checkElementStartsWithCapital(FField message) {
		if (!Character.isLowerCase(message.name.charAt(0))) {
			error('Name should start with a lower case letter', AppPackage.Literals.FFIELD__NAME)
		}

	}

	@Check
	def checkMessageDeclarationStartsWithCapital(Message message) {
		if (!Character.isUpperCase(message.name.charAt(0))) {
			warning('Name should start with a capital',null) 
		}
	}



	@Check
	def checkAppNameStartsWithCapital(Application message) {
		if (!Character.isUpperCase(message.name.charAt(0))) {
			warning('Name should start with a capital',null) 
		}
	}

	@Check
	def checkModelOnlyConstainsOneApp(Application app) {
		var model = (app.eContainer as Model)
		var apps = model.collections.filter(Application)

	//	Console.instance.log(java.util.logging.Level.INFO, "app " + app.eResource.URI.lastSegment);
		if (apps.size() > 1) {
			error('One model should only contain one application', AppPackage.Literals.COLLECTION__NAME)
		}
	}

	@Check
	def checkAppNameSameAsContainingFile(Application app) {
		var filename = app.eResource.URI.lastSegment
		var dot = filename.lastIndexOf('.');
		var String base = " ";
		var String ext = " "
		if (dot == -1) {
			base = filename
			ext = ""
		} else {
			base = filename.substring(0, dot);
			ext = filename.substring(dot + 1);
		}

		if (app.name != base) {
			warning('The name of the application does not match the name of the model file ' + base,
				AppPackage.Literals.COLLECTION__NAME)
		}
	}

	@Check
	def checkAppNameNotKeyword(Application app) {
		if (app.name.toLowerCase == edu.vanderbilt.riaps.generator.cpp.AppCpp.defaultName) {
			error('Name cannot be ' + app.name, AppPackage.Literals.COLLECTION__NAME)
		}
	}

	 

	// Message not referenced
//	@Check
//	def checkLibraryName(Library lib) {
//		if (!lib.name.startsWith("lib")) {
//			error('library name must start with lib', AppPackage.Literals.LIBRARY__NAME)
//		}
//	}

	// Message not referenced
	@Check
	def checkConfigurationName(Configuration f) {
		if (!Path.isValidPosixPath(f.name)) {
			error('not a valid path', null)
		}
	}

	@Check
	def checkComponentNameStartsWithCapital(Component message) {
		if (!Character.isUpperCase(message.name.charAt(0))) {
			warning('Name should start with a capital', AppPackage.Literals.COMPONENT__NAME)
		} 
	}

	@Check
	def checkActorNameStartsWithCapital(Actor message) {
		if (!Character.isUpperCase(message.name.charAt(0))) {
			warning('Name should start with a capital', AppPackage.Literals.ACTOR__NAME)
		} 
	}


 

 

 



	


}
