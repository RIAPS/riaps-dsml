/*
 * generated by Xtext 2.10.0
 */
package edu.vanderbilt.riaps.validation

import org.eclipse.xtext.validation.Check
import edu.vanderbilt.riaps.app.AppPackage
import edu.vanderbilt.riaps.app.Group
import edu.vanderbilt.riaps.app.Leader
import edu.vanderbilt.riaps.app.Consensus
import java.util.HashSet
import edu.vanderbilt.riaps.app.GMessageBlock
import edu.vanderbilt.riaps.app.UsesBlock
import edu.vanderbilt.riaps.app.Component
import edu.vanderbilt.riaps.app.Actor
import edu.vanderbilt.riaps.app.Application
import edu.vanderbilt.riaps.app.DeviceType
import edu.vanderbilt.riaps.app.Library
import edu.vanderbilt.riaps.app.Configuration
import org.eclipse.core.runtime.Path
import edu.vanderbilt.riaps.app.FStructType
import edu.vanderbilt.riaps.app.Message

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class AppValidator extends AbstractAppValidator {


public static val INVALID_NAME = 'invalidName'

	@Check
	def checkFStructTypeStartsWithCapital(FStructType message) {
		if (!Character.isUpperCase(message.name.charAt(0))) {
			error('Name should start with a capital', AppPackage.Literals.COLLECTION__NAME)
		}

	}
	
	@Check
	def checkMessageDeclarationStartsWithCapital(Message message) {
		if (!Character.isUpperCase(message.name.charAt(0))) {
			error('Name should start with a capital', AppPackage.Literals.COLLECTION__NAME)
		}
	}
	
	@Check
	def checkGroupProperties(UsesBlock group) {
		var leaders = group.property.filter(Leader)

		if (leaders.size() > 1) {
			error('duplicate leader definition found', null)
		}
	}

	@Check
	def checkGroupPropertiesConsensus(UsesBlock group) {

		var consensus = group.property.filter(Consensus)
		if (consensus.size() > 1) {
			error('duplicate consensus definition found', null)
		}
	}

	@Check
	def checkAppNameStartsWithCapital(Application message) {
		if (!Character.isUpperCase(message.name.charAt(0))) {
			error('Name should start with a capital', AppPackage.Literals.MODEL__NAME)
		}
	}
	
	
		@Check
	def checkDeviceTypeStartsWithCapital(DeviceType message) {
		if (!Character.isUpperCase(message.name.charAt(0))) {
			error('Name should start with a capital', AppPackage.Literals.MODEL__NAME)
		}
	}
	
	
	// Message not referenced
	@Check
	def checkLibraryName(Library lib){
		if (!lib.name.startsWith("lib")){
			error('library name must start with lib', AppPackage.Literals.LIBRARY__NAME)	
		}
	}
	
		// Message not referenced
	@Check
	def checkConfigurationName(Configuration f){
		if (!Path.isValidPosixPath(f.name)){
			error('not a valid path', AppPackage.Literals.CONFIGURATION__NAME)	
		}
	}

	@Check
	def checkComponentNameStartsWithCapital(Component message) {
		if (!Character.isUpperCase(message.name.charAt(0))) {
			error('Name should start with a capital', AppPackage.Literals.COMPONENT__NAME)
		}
	}

	@Check
	def checkActorNameStartsWithCapital(Actor message) {
		if (!Character.isUpperCase(message.name.charAt(0))) {
			error('Name should start with a capital', AppPackage.Literals.ACTOR__NAME)
		}
	}

	@Check
	def checkGroupUsesBlock(Group group) {
		var messageblock = group.useclauses
		if (messageblock.size() > 1) {
			error('only one message block is allowed in a group', AppPackage.Literals.GROUP__NAME)
		}
	}

	@Check
	def checkGroupMessageBlock(Group group) {
		var messageblock = group.gmessageblock
		if (messageblock.size() > 1) {
			error('only one message block is allowed in a group', AppPackage.Literals.GROUP__NAME)
		}
	}

	@Check
	def checkGroupConsensusMessageUnique(GMessageBlock group) {
		var consensusMessage = group.consensusMessages
		var consensusMessageunique = new HashSet<Message>()
		for (Message x : consensusMessage) {
			if (!consensusMessageunique.add(x)) {
				error('duplicate entry ' + x.name + ' found in consensus Messages', null)
			}
		}
	}

	@Check
	def checkGroupGroupMessageUnique(GMessageBlock group) {
		var consensusMessage = group.groupMessages
		var consensusMessageunique = new HashSet<Message>()
		for (Message x : consensusMessage) {
			if (!consensusMessageunique.add(x)) {
				error('duplicate entry ' + x.name + ' found in group Messages', null)
			}
		}
	}
}
