/*
 * generated by Xtext 2.10.0
 */
package edu.vanderbilt.riaps.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import edu.vanderbilt.riaps.app.CollocateConstraint
import edu.vanderbilt.riaps.app.AppPackage
import org.eclipse.xtext.EcoreUtil2
import edu.vanderbilt.riaps.Console
import edu.vanderbilt.riaps.app.Application 
import edu.vanderbilt.riaps.app.Actor
import org.eclipse.xtext.scoping.Scopes
import edu.vanderbilt.riaps.app.DistributeConstraint
import edu.vanderbilt.riaps.app.Actual
import edu.vanderbilt.riaps.app.Instance
import edu.vanderbilt.riaps.app.ComponentFormal
import edu.vanderbilt.riaps.app.ActorFormal
import edu.vanderbilt.riaps.app.InstanceSection
 

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class AppScopeProvider extends AbstractAppScopeProvider {

	override getScope(EObject context, EReference reference) {
		// We want to define the Scope for the Element's superElement cross-reference
		// Console.instance.log(java.util.logging.Level.INFO, "inscope rule")
		if ((context instanceof CollocateConstraint &&
			reference == AppPackage.Literals.COLLOCATE_CONSTRAINT__ACTORCOLLOCATELIST) ||
			(context instanceof DistributeConstraint &&
				reference == AppPackage.Literals.DISTRIBUTE_CONSTRAINT__ACTORDISTRIBUTELIST)) {
			// Collect a list of candidates by going through the model
			// EcoreUtil2 provides useful functionality to do that
			// For example searching for all elements within the root Object's tree    	
			val rootElement = context.eContainer
			if (rootElement instanceof Application) { 
				// Console.instance.log(java.util.logging.Level.INFO, rootElement.name)
				val candidates = EcoreUtil2.getAllContentsOfType(rootElement, Actor)
				// Create IEObjectDescriptions and puts them into an IScope instance
				return Scopes.scopeFor(candidates)
			}
		} else if (context instanceof Actual && reference == AppPackage.Literals.ACTUAL__ARG_NAME) {
			val rootElement = context.eContainer
			if (rootElement instanceof Instance) {
				val candidates = EcoreUtil2.getAllContentsOfType(rootElement.type, ComponentFormal)
				return Scopes.scopeFor(candidates)
			}
			 
			 
		} else if (context instanceof Actual && reference == AppPackage.Literals.ACTUAL__ARG_VALUE) {
			// Console.instance.log(java.util.logging.Level.INFO, "arg value reference")
			val rootElement = context.eContainer
			if (rootElement instanceof Instance) {
				val instanceSection = rootElement.eContainer

				if (instanceSection instanceof InstanceSection) {
					val actor = instanceSection.eContainer
					// Console.instance.log(java.util.logging.Level.INFO, actor.class.name)
					if (actor instanceof Actor) {
						val candidates = EcoreUtil2.getAllContentsOfType(actor, ActorFormal)
						return Scopes.scopeFor(candidates)
					}
				}

			}
 
		}

		return super.getScope(context, reference);
	}

}
