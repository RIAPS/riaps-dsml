package edu.vanderbilt.riaps.generator.cpp

import edu.vanderbilt.riaps.app.Component
import edu.vanderbilt.riaps.app.Port
import java.util.HashMap
import java.util.ArrayList
import edu.vanderbilt.riaps.app.PubPort
import edu.vanderbilt.riaps.app.SubPort
import edu.vanderbilt.riaps.app.ReqPort
import edu.vanderbilt.riaps.app.TimPort
import edu.vanderbilt.riaps.app.RepPort
import java.util.HashSet

@SuppressWarnings("unused", "unchecked")
class CompCpp {
	public String componentName
	protected String applicationName
	protected var ports = new ArrayList<PortCppBase>
	protected var msgIncludes = new HashSet<String>
	
	new (Component comp, String appName, HashMap<String, String> portMsgType) {
		componentName = comp.name
		applicationName = appName
		
		createPorts(comp, portMsgType)
	}
	
	def void createPorts(Component riapsComponent, HashMap<String, String> portMsgTypeMap) {
		for(Port port : riapsComponent.getPorts()) {
			if (port instanceof PubPort) {
				var pubPort = new PubPortCpp(port, riapsComponent.name, portMsgTypeMap)
				ports.add(pubPort)
				msgIncludes.add(pubPort.msgType)
			}
			else if (port instanceof SubPort) {
				var subPort = new SubPortCpp(port, riapsComponent.name, portMsgTypeMap)
				ports.add(subPort)	
				msgIncludes.add(subPort.msgType)		
			}
			else if (port instanceof ReqPort) {
				var reqPort = new ReqPortCpp(port, riapsComponent.name, portMsgTypeMap)
				ports.add(reqPort)
				msgIncludes.add(reqPort.repType)
				msgIncludes.add(reqPort.reqType)
			}
			else if (port instanceof RepPort) {
				var repPort = new RepPortCpp(port, riapsComponent.name, portMsgTypeMap)
				ports.add(repPort)
				msgIncludes.add(repPort.repType)
				msgIncludes.add(repPort.reqType)
			}
			else if (port instanceof TimPort) {
				ports.add(new TimerPortCpp(port, riapsComponent.name))
			}
		}	
	}
	
	//////////////////////////////////////////////////////////////////////////////
	// Base Gen Functions
	//////////////////////////////////////////////////////////////////////////////
	def generateBaseH() 	'''
	//
	// Auto-generated by edu.vanderbilt.riaps.generator.ComponenetGenerator.xtend
	//
	
	#ifndef RIAPS_CORE_«componentName.toUpperCase»_H
	#define RIAPS_CORE_«componentName.toUpperCase»_H
	
	#include "componentmodel/r_componentbase.h"
	//#include "messages/«this.applicationName.toLowerCase».capnp.h"
	«FOR include: msgIncludes»
	#include "messages/«include».capnp.h"
	«ENDFOR»
	
	// Name of the ports from the model file
	«FOR PortCppBase p: ports»
	#define «p.portMacroName» "«p.portName»"
	«ENDFOR»
	
	namespace «applicationName.toLowerCase» {
	    namespace components {
	    	
	    	class «componentName»Base : public riaps::ComponentBase {
	    		
	    	public:
	    		«componentName»Base(_component_conf_j &config, riaps::Actor &actor);
	    		
	    		«FOR PortCppBase p: ports»
	    			«p.generateBaseH»
	    			
	    		«ENDFOR»	    		
	    	    virtual ~«componentName»Base();
	    	protected:
	    		virtual void DispatchMessage(capnp::FlatArrayMessageReader* capnpreader, riaps::ports::PortBase *port);
	    		virtual void DispatchInsideMessage(zmsg_t* zmsg, riaps::ports::PortBase* port);
	        };
	    }
	}
	#endif //RIAPS_CORE_«componentName.toUpperCase»_H	
	'''
	
	def generateBaseCpp() '''
	//
	// Auto-generated by edu.vanderbilt.riaps.generator.ComponenetGenerator.xtend
	//
	#include <base/«componentName»Base.h>
	
	namespace «applicationName.toLowerCase» {
	    namespace components {
	    	
	    	«componentName»Base::«componentName»Base(_component_conf_j &config, riaps::Actor &actor) : ComponentBase(config, actor) {
	    	
	    	}
	    	
	    	void «componentName»Base::DispatchMessage(capnp::FlatArrayMessageReader* capnpreader, riaps::ports::PortBase *port) {
	    		auto portName = port->GetPortName();
				«FOR PortCppBase p: ports»
				«p.generateBaseDispatch()»
				
				«ENDFOR»
	    	}
	    	
	    	void «componentName»Base::DispatchInsideMessage(zmsg_t* zmsg, riaps::ports::PortBase* port) {
	    		    		//empty the header
	    		    	}
	    	
	    	«FOR PortCppBase p: ports»
	    	«p.generateBaseCpp()»
	    	«ENDFOR»
	    	
	    	«componentName»Base::~«componentName»Base() {
	    	
	    	}
	    }
	}	
	'''
	
	
	//////////////////////////////////////////////////////////////////////////////
	// FW Gen Functions
	//////////////////////////////////////////////////////////////////////////////
	def generateFW_H() 	'''
		//
		// Auto-generated by edu.vanderbilt.riaps.generator.ComponenetGenerator.xtend
		//
		#ifndef RIAPS_FW_«componentName.toUpperCase»_H
		#define RIAPS_FW_«componentName.toUpperCase»_H
		
		#include "base/«componentName»Base.h"
		
		namespace «applicationName.toLowerCase» {
		    namespace components {
		
		        class «componentName» : public «componentName»Base {
		
		        public:
		
		            «componentName»(_component_conf_j &config, riaps::Actor &actor);		
		
		            «FOR p: ports»
		            «p.generateFW_H()»
		            
					«ENDFOR»		
					virtual void OnOneShotTimer(const std::string& timerid);
					
		            virtual ~«componentName»();
		
		        };
		    }
		}
		
		extern "C" riaps::ComponentBase* create_component(_component_conf_j&, riaps::Actor& actor);
		extern "C" void destroy_component(riaps::ComponentBase*);
		
		
		#endif //RIAPS_FW_«componentName.toUpperCase»_H		
	'''
	
	def generateFW_Cpp() '''
		#include <«componentName».h>
		
		namespace «applicationName.toLowerCase» {
		    namespace components {		
		
		        «componentName»::«componentName»(_component_conf_j &config, riaps::Actor &actor) :
		                «componentName»Base(config, actor) {
		        }
		
				«FOR p: ports»
				«p.generateFW_Cpp()»
				
				«ENDFOR»
				void «componentName»::OnOneShotTimer(const std::string& timerid){
				
				}

		        «componentName»::~«componentName»() {
		
		        }
		    }
		}
		
		riaps::ComponentBase *create_component(_component_conf_j &config, riaps::Actor &actor) {
		    auto result = new «applicationName.toLowerCase»::components::«componentName»(config, actor);
		    return result;
		}
		
		void destroy_component(riaps::ComponentBase *comp) {
		    delete comp;
		}
	'''
	
	
}