/********************************************************************************/
//these are top level declarations. The Terminals describe the base datatypes as strings and integers
grammar edu.vanderbilt.riaps.Datatypes with org.eclipse.xtext.common.Terminals

generate datatypes "http://www.vanderbilt.edu/riaps/Datatypes"
//xtext requires us to import ecore primitives.
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
// **************************************************************
// All models start with the keyword Model. The package definition is not optional.
// package names can be nested. For example package edu.vanderbilt.isis 
// model root
Model returns Mdodel:
	{Model}
	('package' name=FQN)
	(imports+=Import)*
	(collection+=ModelCollection)*;

Import:
	'import' (importedNamespace=ImportedFQN) (';')?;

FQN:
	ID ('.' ID)*;
	//An imported FQN is pulled from a different file.
ImportedFQN:
	FQN ('.' '*')?;

ModelCollection:
	FType
	| Message;

FType returns FType:
	FEnumerationType |
	FStructType;

	
FStructType returns FStructType:
//A message can only refer to a structure.	
	{FStructType}
	'struct' name=ID
	'{'
	(elements+=FField)*
	'}';


FField:
	//the [] declares a filed to be an array
	name=ID ':' type=FTypeRef (list?='[' ']')? (';')?;


FTypeRef returns FTypeRef:
		//These are references to types.
	predefined=FBasicTypeId | derived=[FType|FQN];


enum FBasicTypeId returns FBasicTypeId:
//These are the basic types that are supported by the datatypes language
	Int8='Int8' |
	UInt8='UInt8' |
	Int16='Int16' |
	UInt16='UInt16' |
	Int32='Int32' |
	UInt32='UInt32' |
	Int64='Int64' |
	UInt64='UInt64' |
	Boolean='Boolean' |
	String='String' |
	Float='Float' |
	Double='Double' |
	Char='Char' |
	ByteBuffer='ByteBuffer';

	//We support enumerations as well. A structure can have a field that is an enumeration.	
FEnumerationType returns FEnumerationType:
	{FEnumerationType}
	'enumeration' name=ID
	'{'
	(enumerators+=FEnumerator (','? enumerators+=FEnumerator)*) (';')?
	'}';

FEnumerator returns FEnumerator:
	{FEnumerator}
	name=ID ('=' value=STRING)?;

Message:
	'message' name=ID ':' type=[FStructType|FQN] (';')?;

	/* Device Type declares a device wrapper that uses a particular protocol
// Example device type definition
package weathermonitor.devices;
device Thermostat()	{               // Defines a 'thermostat' device type
	uses {                          // Resources the device component uses
        cpu 25 % over 10 sec;       // CPU at 25% over a 10 second interval
		io "UART";                  // I/O protocol
	}
    pub p1: tempInternal [-,10];    // One publisher port for tempInternal messages, 
                                    // with data rate limits: no lower limit, 10 message/sec 
}	
* 
*/
