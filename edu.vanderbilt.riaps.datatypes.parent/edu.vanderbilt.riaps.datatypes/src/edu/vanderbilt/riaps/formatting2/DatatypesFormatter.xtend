/*
 * generated by Xtext 2.10.0
 */
package edu.vanderbilt.riaps.formatting2

import com.google.inject.Inject



import edu.vanderbilt.riaps.datatypes.Import
import edu.vanderbilt.riaps.datatypes.Model
import edu.vanderbilt.riaps.services.DatatypesGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import edu.vanderbilt.riaps.datatypes.FType
//import edu.vanderbilt.riaps.datatypes.FMessage
import edu.vanderbilt.riaps.datatypes.FStructType
import edu.vanderbilt.riaps.datatypes.FField
import edu.vanderbilt.riaps.datatypes.ModelCollection

class DatatypesFormatter extends AbstractFormatter2 {

	@Inject extension DatatypesGrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Import imports : model.getImports()) {
			imports.format;
			imports.prepend[noSpace; newLine].append[noSpace; newLine]
		}
		model.prepend[noSpace].append[noSpace; newLine]
		
		
		for (ModelCollection Type : model.collection) {
			Type.format;
		}
//		for (FMessageCollection messageCollections : model.getMessageCollections()) {
//			messageCollections.format;
//		}
	}

	



	def dispatch void format(ModelCollection collection, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		val open = collection.regionFor.keyword("{").prepend[noSpace; newLine].append[noSpace; newLine]
		val close = collection.regionFor.keyword("}").prepend[noSpace; newLine].append[noSpace; newLine]
		interior(open, close)[indent]
		collection.prepend[noSpace; newLine].append[noSpace; newLine]

		if (collection instanceof FStructType) {

			for (FField e : collection.elements) {
				e.prepend[noSpace; newLine].append[noSpace; newLine]

			}
		}

	}

//	def dispatch void format(FMessageCollection collection, extension IFormattableDocument document) {
//		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
//		val open = collection.regionFor.keyword("{").prepend[noSpace; newLine].append[noSpace; newLine]
//		val close = collection.regionFor.keyword("}").prepend[noSpace; newLine].append[noSpace; newLine]
//		interior(open, close)[indent]
//		for (FMessage elements : collection.getMessages()) {
//			elements.format;
//			elements.prepend[noSpace; newLine].append[noSpace; newLine]
//		}
//		var v = collection.getVersion
//		{
//			val opena = v.regionFor.keyword("{").prepend[noSpace; newLine].append[noSpace; newLine]
//			val closea = v.regionFor.keyword("}").prepend[noSpace; newLine].append[noSpace; newLine]
//			interior(opena, closea)[indent]
//		}
//		collection.prepend[noSpace; newLine].append[noSpace; newLine]
//
//	}

// TODO: implement for FTypeCollection, , , FTypeDef, FStructType, FEnumerationType, FEnumerator, FMapType, FField
}
