/*
 * generated by Xtext 2.10.0
 */
package edu.vanderbilt.riaps.validation

import edu.vanderbilt.riaps.datatypes.DatatypesPackage
import edu.vanderbilt.riaps.datatypes.FStructType
import org.eclipse.xtext.validation.Check
import edu.vanderbilt.riaps.datatypes.Library
import edu.vanderbilt.riaps.datatypes.Configuration
import org.eclipse.core.runtime.Path
import edu.vanderbilt.riaps.datatypes.Message
import edu.vanderbilt.riaps.datatypes.DeviceType

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class DatatypesValidator extends AbstractDatatypesValidator {

	public static val INVALID_NAME = 'invalidName'

	@Check
	def checkFStructTypeStartsWithCapital(FStructType message) {
		if (!Character.isUpperCase(message.name.charAt(0))) {
			error('Name should start with a capital', DatatypesPackage.Literals.MODEL_COLLECTION__NAME)
		}

	}
	
	@Check
	def checkMessageDeclarationStartsWithCapital(Message message) {
		if (!Character.isUpperCase(message.name.charAt(0))) {
			error('Name should start with a capital', DatatypesPackage.Literals.MODEL_COLLECTION__NAME)
		}
	}
	
	@Check
	def checkDeviceTypeStartsWithCapital(DeviceType message) {
		if (!Character.isUpperCase(message.name.charAt(0))) {
			error('Name should start with a capital', DatatypesPackage.Literals.MODEL_COLLECTION__NAME)
		}
	}
	
	
	// Message not referenced
	@Check
	def checkLibraryName(Library lib){
		if (!lib.name.startsWith("lib")){
			error('library name must start with lib', DatatypesPackage.Literals.LIBRARY__NAME)	
		}
	}
	
		// Message not referenced
	@Check
	def checkConfigurationName(Configuration f){
		if (!Path.isValidPosixPath(f.name)){
			error('not a valid path', DatatypesPackage.Literals.CONFIGURATION__NAME)	
		}
	}

}
 