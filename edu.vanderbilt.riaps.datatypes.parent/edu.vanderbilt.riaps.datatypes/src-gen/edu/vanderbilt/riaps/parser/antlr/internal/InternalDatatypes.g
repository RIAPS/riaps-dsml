/*
 * generated by Xtext 2.10.0
 */
grammar InternalDatatypes;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package edu.vanderbilt.riaps.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.vanderbilt.riaps.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.vanderbilt.riaps.services.DatatypesGrammarAccess;

}

@parser::members {

 	private DatatypesGrammarAccess grammarAccess;

    public InternalDatatypesParser(TokenStream input, DatatypesGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected DatatypesGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getModelAccess().getModelAction_0(),
					$current);
			}
		)
		otherlv_1='package'
		{
			newLeafNode(otherlv_1, grammarAccess.getModelAccess().getPackageKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getNameFQNParserRuleCall_2_0());
				}
				lv_name_2_0=ruleFQN
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"edu.vanderbilt.riaps.Datatypes.FQN");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_3_0());
				}
				lv_imports_3_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"imports",
						lv_imports_3_0,
						"edu.vanderbilt.riaps.Datatypes.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getTypeCollectionsFTypeCollectionParserRuleCall_4_0());
				}
				lv_typeCollections_4_0=ruleFTypeCollection
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"typeCollections",
						lv_typeCollections_4_0,
						"edu.vanderbilt.riaps.Datatypes.FTypeCollection");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceImportedFQNParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleImportedFQN
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"edu.vanderbilt.riaps.Datatypes.ImportedFQN");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleImportedFQN
entryRuleImportedFQN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImportedFQNRule()); }
	iv_ruleImportedFQN=ruleImportedFQN
	{ $current=$iv_ruleImportedFQN.current.getText(); }
	EOF;

// Rule ImportedFQN
ruleImportedFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getImportedFQNAccess().getFQNParserRuleCall_0());
		}
		this_FQN_0=ruleFQN
		{
			$current.merge(this_FQN_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getImportedFQNAccess().getFullStopKeyword_1_0());
			}
			kw='*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getImportedFQNAccess().getAsteriskKeyword_1_1());
			}
		)?
	)
;

// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFQNRule()); }
	iv_ruleFQN=ruleFQN
	{ $current=$iv_ruleFQN.current.getText(); }
	EOF;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleFTypeCollection
entryRuleFTypeCollection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFTypeCollectionRule()); }
	iv_ruleFTypeCollection=ruleFTypeCollection
	{ $current=$iv_ruleFTypeCollection.current; }
	EOF;

// Rule FTypeCollection
ruleFTypeCollection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFTypeCollectionAccess().getFTypeCollectionAction_0(),
					$current);
			}
		)
		otherlv_1='typeCollection'
		{
			newLeafNode(otherlv_1, grammarAccess.getFTypeCollectionAccess().getTypeCollectionKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getFTypeCollectionAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFTypeCollectionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)?
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getFTypeCollectionAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='version'
			{
				newLeafNode(otherlv_4, grammarAccess.getFTypeCollectionAccess().getVersionKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFTypeCollectionAccess().getVersionFVersionParserRuleCall_4_1_0());
					}
					lv_version_5_0=ruleFVersion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFTypeCollectionRule());
						}
						set(
							$current,
							"version",
							lv_version_5_0,
							"edu.vanderbilt.riaps.Datatypes.FVersion");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFTypeCollectionAccess().getTypesFTypeParserRuleCall_5_0());
				}
				lv_types_6_0=ruleFType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFTypeCollectionRule());
					}
					add(
						$current,
						"types",
						lv_types_6_0,
						"edu.vanderbilt.riaps.Datatypes.FType");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getFTypeCollectionAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleFVersion
entryRuleFVersion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFVersionRule()); }
	iv_ruleFVersion=ruleFVersion
	{ $current=$iv_ruleFVersion.current; }
	EOF;

// Rule FVersion
ruleFVersion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFVersionAccess().getFVersionAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getFVersionAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='major'
		{
			newLeafNode(otherlv_2, grammarAccess.getFVersionAccess().getMajorKeyword_2());
		}
		(
			(
				lv_major_3_0=RULE_INT
				{
					newLeafNode(lv_major_3_0, grammarAccess.getFVersionAccess().getMajorINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFVersionRule());
					}
					setWithLastConsumed(
						$current,
						"major",
						lv_major_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4='minor'
		{
			newLeafNode(otherlv_4, grammarAccess.getFVersionAccess().getMinorKeyword_4());
		}
		(
			(
				lv_minor_5_0=RULE_INT
				{
					newLeafNode(lv_minor_5_0, grammarAccess.getFVersionAccess().getMinorINTTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFVersionRule());
					}
					setWithLastConsumed(
						$current,
						"minor",
						lv_minor_5_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getFVersionAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleFTypeRef
entryRuleFTypeRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFTypeRefRule()); }
	iv_ruleFTypeRef=ruleFTypeRef
	{ $current=$iv_ruleFTypeRef.current; }
	EOF;

// Rule FTypeRef
ruleFTypeRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFTypeRefAccess().getPredefinedFBasicTypeIdEnumRuleCall_0_0());
				}
				lv_predefined_0_0=ruleFBasicTypeId
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFTypeRefRule());
					}
					set(
						$current,
						"predefined",
						lv_predefined_0_0,
						"edu.vanderbilt.riaps.Datatypes.FBasicTypeId");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFTypeRefRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getFTypeRefAccess().getDerivedFTypeCrossReference_1_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFType
entryRuleFType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFTypeRule()); }
	iv_ruleFType=ruleFType
	{ $current=$iv_ruleFType.current; }
	EOF;

// Rule FType
ruleFType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFTypeAccess().getFEnumerationTypeParserRuleCall_0());
		}
		this_FEnumerationType_0=ruleFEnumerationType
		{
			$current = $this_FEnumerationType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFTypeAccess().getFStructTypeParserRuleCall_1());
		}
		this_FStructType_1=ruleFStructType
		{
			$current = $this_FStructType_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFTypeAccess().getFMapTypeParserRuleCall_2());
		}
		this_FMapType_2=ruleFMapType
		{
			$current = $this_FMapType_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFStructType
entryRuleFStructType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFStructTypeRule()); }
	iv_ruleFStructType=ruleFStructType
	{ $current=$iv_ruleFStructType.current; }
	EOF;

// Rule FStructType
ruleFStructType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFStructTypeAccess().getFStructTypeAction_0(),
					$current);
			}
		)
		otherlv_1='struct'
		{
			newLeafNode(otherlv_1, grammarAccess.getFStructTypeAccess().getStructKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getFStructTypeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFStructTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='extends'
			{
				newLeafNode(otherlv_3, grammarAccess.getFStructTypeAccess().getExtendsKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFStructTypeRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getFStructTypeAccess().getBaseFStructTypeCrossReference_3_1_0());
					}
					ruleFQN
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getFStructTypeAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFStructTypeAccess().getElementsFFieldParserRuleCall_5_0());
				}
				lv_elements_6_0=ruleFField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFStructTypeRule());
					}
					add(
						$current,
						"elements",
						lv_elements_6_0,
						"edu.vanderbilt.riaps.Datatypes.FField");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getFStructTypeAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleFEnumerationType
entryRuleFEnumerationType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFEnumerationTypeRule()); }
	iv_ruleFEnumerationType=ruleFEnumerationType
	{ $current=$iv_ruleFEnumerationType.current; }
	EOF;

// Rule FEnumerationType
ruleFEnumerationType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFEnumerationTypeAccess().getFEnumerationTypeAction_0(),
					$current);
			}
		)
		otherlv_1='enumeration'
		{
			newLeafNode(otherlv_1, grammarAccess.getFEnumerationTypeAccess().getEnumerationKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getFEnumerationTypeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFEnumerationTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_3='extends'
			{
				newLeafNode(otherlv_3, grammarAccess.getFEnumerationTypeAccess().getExtendsKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFEnumerationTypeRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getFEnumerationTypeAccess().getBaseFEnumerationTypeCrossReference_3_1_0());
					}
					ruleFQN
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getFEnumerationTypeAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFEnumerationTypeAccess().getEnumeratorsFEnumeratorParserRuleCall_5_0_0());
					}
					lv_enumerators_6_0=ruleFEnumerator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFEnumerationTypeRule());
						}
						add(
							$current,
							"enumerators",
							lv_enumerators_6_0,
							"edu.vanderbilt.riaps.Datatypes.FEnumerator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					otherlv_7=','
					{
						newLeafNode(otherlv_7, grammarAccess.getFEnumerationTypeAccess().getCommaKeyword_5_1_0());
					}
				)?
				(
					(
						{
							newCompositeNode(grammarAccess.getFEnumerationTypeAccess().getEnumeratorsFEnumeratorParserRuleCall_5_1_1_0());
						}
						lv_enumerators_8_0=ruleFEnumerator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFEnumerationTypeRule());
							}
							add(
								$current,
								"enumerators",
								lv_enumerators_8_0,
								"edu.vanderbilt.riaps.Datatypes.FEnumerator");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getFEnumerationTypeAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleFEnumerator
entryRuleFEnumerator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFEnumeratorRule()); }
	iv_ruleFEnumerator=ruleFEnumerator
	{ $current=$iv_ruleFEnumerator.current; }
	EOF;

// Rule FEnumerator
ruleFEnumerator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFEnumeratorAccess().getFEnumeratorAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFEnumeratorAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFEnumeratorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getFEnumeratorAccess().getEqualsSignKeyword_2_0());
			}
			(
				(
					lv_value_3_0=RULE_STRING
					{
						newLeafNode(lv_value_3_0, grammarAccess.getFEnumeratorAccess().getValueSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFEnumeratorRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleFMapType
entryRuleFMapType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFMapTypeRule()); }
	iv_ruleFMapType=ruleFMapType
	{ $current=$iv_ruleFMapType.current; }
	EOF;

// Rule FMapType
ruleFMapType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFMapTypeAccess().getFMapTypeAction_0(),
					$current);
			}
		)
		otherlv_1='map'
		{
			newLeafNode(otherlv_1, grammarAccess.getFMapTypeAccess().getMapKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getFMapTypeAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFMapTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getFMapTypeAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFMapTypeAccess().getKeyTypeFTypeRefParserRuleCall_4_0());
				}
				lv_keyType_4_0=ruleFTypeRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFMapTypeRule());
					}
					set(
						$current,
						"keyType",
						lv_keyType_4_0,
						"edu.vanderbilt.riaps.Datatypes.FTypeRef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='to'
		{
			newLeafNode(otherlv_5, grammarAccess.getFMapTypeAccess().getToKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFMapTypeAccess().getValueTypeFTypeRefParserRuleCall_6_0());
				}
				lv_valueType_6_0=ruleFTypeRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFMapTypeRule());
					}
					set(
						$current,
						"valueType",
						lv_valueType_6_0,
						"edu.vanderbilt.riaps.Datatypes.FTypeRef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getFMapTypeAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleFField
entryRuleFField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFFieldRule()); }
	iv_ruleFField=ruleFField
	{ $current=$iv_ruleFField.current; }
	EOF;

// Rule FField
ruleFField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFFieldAccess().getTypeFTypeRefParserRuleCall_0_0());
				}
				lv_type_0_0=ruleFTypeRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFFieldRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"edu.vanderbilt.riaps.Datatypes.FTypeRef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_list_1_0='['
					{
						newLeafNode(lv_list_1_0, grammarAccess.getFFieldAccess().getListLeftSquareBracketKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFFieldRule());
						}
						setWithLastConsumed($current, "list", true, "[");
					}
				)
			)
			otherlv_2=']'
			{
				newLeafNode(otherlv_2, grammarAccess.getFFieldAccess().getRightSquareBracketKeyword_1_1());
			}
		)?
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getFFieldAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFFieldRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Rule FBasicTypeId
ruleFBasicTypeId returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Int8'
			{
				$current = grammarAccess.getFBasicTypeIdAccess().getInt8EnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getFBasicTypeIdAccess().getInt8EnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='UInt8'
			{
				$current = grammarAccess.getFBasicTypeIdAccess().getUInt8EnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getFBasicTypeIdAccess().getUInt8EnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Int16'
			{
				$current = grammarAccess.getFBasicTypeIdAccess().getInt16EnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getFBasicTypeIdAccess().getInt16EnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='UInt16'
			{
				$current = grammarAccess.getFBasicTypeIdAccess().getUInt16EnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getFBasicTypeIdAccess().getUInt16EnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Int32'
			{
				$current = grammarAccess.getFBasicTypeIdAccess().getInt32EnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getFBasicTypeIdAccess().getInt32EnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='UInt32'
			{
				$current = grammarAccess.getFBasicTypeIdAccess().getUInt32EnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getFBasicTypeIdAccess().getUInt32EnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='Int64'
			{
				$current = grammarAccess.getFBasicTypeIdAccess().getInt64EnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getFBasicTypeIdAccess().getInt64EnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='UInt64'
			{
				$current = grammarAccess.getFBasicTypeIdAccess().getUInt64EnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getFBasicTypeIdAccess().getUInt64EnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='Boolean'
			{
				$current = grammarAccess.getFBasicTypeIdAccess().getBooleanEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getFBasicTypeIdAccess().getBooleanEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='String'
			{
				$current = grammarAccess.getFBasicTypeIdAccess().getStringEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getFBasicTypeIdAccess().getStringEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='Float'
			{
				$current = grammarAccess.getFBasicTypeIdAccess().getFloatEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getFBasicTypeIdAccess().getFloatEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='Double'
			{
				$current = grammarAccess.getFBasicTypeIdAccess().getDoubleEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getFBasicTypeIdAccess().getDoubleEnumLiteralDeclaration_11());
			}
		)
		    |
		(
			enumLiteral_12='Char'
			{
				$current = grammarAccess.getFBasicTypeIdAccess().getCharEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_12, grammarAccess.getFBasicTypeIdAccess().getCharEnumLiteralDeclaration_12());
			}
		)
		    |
		(
			enumLiteral_13='ByteBuffer'
			{
				$current = grammarAccess.getFBasicTypeIdAccess().getByteBufferEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_13, grammarAccess.getFBasicTypeIdAccess().getByteBufferEnumLiteralDeclaration_13());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
