/*
 * generated by Xtext 2.10.0
 */
package edu.vanderbilt.riaps.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DatatypesGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.Datatypes.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameFQNParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cTypeCollectionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeCollectionsFTypeCollectionParserRuleCall_4_0 = (RuleCall)cTypeCollectionsAssignment_4.eContents().get(0);
		
		//// **************************************************************
		//// model root
		//Model Mdodel:
		//	{Model}
		//	'package' name=FQN
		//	imports+=Import*
		//	typeCollections+=FTypeCollection*
		@Override public ParserRule getRule() { return rule; }
		
		//{Model} 'package' name=FQN imports+=Import* typeCollections+=FTypeCollection*
		public Group getGroup() { return cGroup; }
		
		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }
		
		//'package'
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }
		
		//name=FQN
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_2_0() { return cNameFQNParserRuleCall_2_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }
		
		//typeCollections+=FTypeCollection*
		public Assignment getTypeCollectionsAssignment_4() { return cTypeCollectionsAssignment_4; }
		
		//FTypeCollection
		public RuleCall getTypeCollectionsFTypeCollectionParserRuleCall_4_0() { return cTypeCollectionsFTypeCollectionParserRuleCall_4_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.Datatypes.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceImportedFQNParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//// **************************************************************
		//// general
		////Package:
		////	'package' name=FQN
		////;
		//Import:
		//	'import' importedNamespace=ImportedFQN;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=ImportedFQN
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=ImportedFQN
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//ImportedFQN
		public RuleCall getImportedNamespaceImportedFQNParserRuleCall_1_0() { return cImportedNamespaceImportedFQNParserRuleCall_1_0; }
	}
	public class ImportedFQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.Datatypes.ImportedFQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFQNParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ImportedFQN:
		//	FQN ('.' '*')?;
		@Override public ParserRule getRule() { return rule; }
		
		//FQN ('.' '*')?
		public Group getGroup() { return cGroup; }
		
		//FQN
		public RuleCall getFQNParserRuleCall_0() { return cFQNParserRuleCall_0; }
		
		//('.' '*')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.Datatypes.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class FTypeCollectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.Datatypes.FTypeCollection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFTypeCollectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTypesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVersionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVersionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVersionFVersionParserRuleCall_4_1_0 = (RuleCall)cVersionAssignment_4_1.eContents().get(0);
		private final Assignment cTypesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypesFTypeParserRuleCall_5_0 = (RuleCall)cTypesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//FTypeCollection:
		//	{FTypeCollection}
		//	'types' name=ID?
		//	'{' ('version' version=FVersion)?
		//	types+=FType*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{FTypeCollection} 'types' name=ID? '{' ('version' version=FVersion)? types+=FType* '}'
		public Group getGroup() { return cGroup; }
		
		//{FTypeCollection}
		public Action getFTypeCollectionAction_0() { return cFTypeCollectionAction_0; }
		
		//'types'
		public Keyword getTypesKeyword_1() { return cTypesKeyword_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('version' version=FVersion)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'version'
		public Keyword getVersionKeyword_4_0() { return cVersionKeyword_4_0; }
		
		//version=FVersion
		public Assignment getVersionAssignment_4_1() { return cVersionAssignment_4_1; }
		
		//FVersion
		public RuleCall getVersionFVersionParserRuleCall_4_1_0() { return cVersionFVersionParserRuleCall_4_1_0; }
		
		//types+=FType*
		public Assignment getTypesAssignment_5() { return cTypesAssignment_5; }
		
		//FType
		public RuleCall getTypesFTypeParserRuleCall_5_0() { return cTypesFTypeParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class FMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.Datatypes.FMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFMessageAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDerivedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDerivedFStructTypeCrossReference_1_0 = (CrossReference)cDerivedAssignment_1.eContents().get(0);
		private final RuleCall cDerivedFStructTypeFQNParserRuleCall_1_0_1 = (RuleCall)cDerivedFStructTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cKeyKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cKeyAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cKeyFFieldCrossReference_3_1_0 = (CrossReference)cKeyAssignment_3_1.eContents().get(0);
		private final RuleCall cKeyFFieldFQNParserRuleCall_3_1_0_1 = (RuleCall)cKeyFFieldCrossReference_3_1_0.eContents().get(1);
		
		//FMessage:
		//	{FMessage} derived=[FStructType|FQN] name=ID ('key' key=[FField|FQN])?;
		@Override public ParserRule getRule() { return rule; }
		
		//{FMessage} derived=[FStructType|FQN] name=ID ('key' key=[FField|FQN])?
		public Group getGroup() { return cGroup; }
		
		//{FMessage}
		public Action getFMessageAction_0() { return cFMessageAction_0; }
		
		//derived=[FStructType|FQN]
		public Assignment getDerivedAssignment_1() { return cDerivedAssignment_1; }
		
		//[FStructType|FQN]
		public CrossReference getDerivedFStructTypeCrossReference_1_0() { return cDerivedFStructTypeCrossReference_1_0; }
		
		//FQN
		public RuleCall getDerivedFStructTypeFQNParserRuleCall_1_0_1() { return cDerivedFStructTypeFQNParserRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('key' key=[FField|FQN])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'key'
		public Keyword getKeyKeyword_3_0() { return cKeyKeyword_3_0; }
		
		//key=[FField|FQN]
		public Assignment getKeyAssignment_3_1() { return cKeyAssignment_3_1; }
		
		//[FField|FQN]
		public CrossReference getKeyFFieldCrossReference_3_1_0() { return cKeyFFieldCrossReference_3_1_0; }
		
		//FQN
		public RuleCall getKeyFFieldFQNParserRuleCall_3_1_0_1() { return cKeyFFieldFQNParserRuleCall_3_1_0_1; }
	}
	public class FVersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.Datatypes.FVersion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFVersionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMajorKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMajorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMajorINTTerminalRuleCall_3_0 = (RuleCall)cMajorAssignment_3.eContents().get(0);
		private final Keyword cMinorKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMinorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMinorINTTerminalRuleCall_5_0 = (RuleCall)cMinorAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//FVersion:
		//	{FVersion}
		//	'{'
		//	'major' major=INT
		//	'minor' minor=INT
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{FVersion} '{' 'major' major=INT 'minor' minor=INT '}'
		public Group getGroup() { return cGroup; }
		
		//{FVersion}
		public Action getFVersionAction_0() { return cFVersionAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'major'
		public Keyword getMajorKeyword_2() { return cMajorKeyword_2; }
		
		//major=INT
		public Assignment getMajorAssignment_3() { return cMajorAssignment_3; }
		
		//INT
		public RuleCall getMajorINTTerminalRuleCall_3_0() { return cMajorINTTerminalRuleCall_3_0; }
		
		//'minor'
		public Keyword getMinorKeyword_4() { return cMinorKeyword_4; }
		
		//minor=INT
		public Assignment getMinorAssignment_5() { return cMinorAssignment_5; }
		
		//INT
		public RuleCall getMinorINTTerminalRuleCall_5_0() { return cMinorINTTerminalRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class FTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.Datatypes.FTypeRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPredefinedAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cPredefinedFBasicTypeIdEnumRuleCall_0_0 = (RuleCall)cPredefinedAssignment_0.eContents().get(0);
		private final Assignment cDerivedAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cDerivedFTypeCrossReference_1_0 = (CrossReference)cDerivedAssignment_1.eContents().get(0);
		private final RuleCall cDerivedFTypeFQNParserRuleCall_1_0_1 = (RuleCall)cDerivedFTypeCrossReference_1_0.eContents().get(1);
		
		//FTypeRef:
		//	predefined=FBasicTypeId | derived=[FType|FQN];
		@Override public ParserRule getRule() { return rule; }
		
		//predefined=FBasicTypeId | derived=[FType|FQN]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//predefined=FBasicTypeId
		public Assignment getPredefinedAssignment_0() { return cPredefinedAssignment_0; }
		
		//FBasicTypeId
		public RuleCall getPredefinedFBasicTypeIdEnumRuleCall_0_0() { return cPredefinedFBasicTypeIdEnumRuleCall_0_0; }
		
		//derived=[FType|FQN]
		public Assignment getDerivedAssignment_1() { return cDerivedAssignment_1; }
		
		//[FType|FQN]
		public CrossReference getDerivedFTypeCrossReference_1_0() { return cDerivedFTypeCrossReference_1_0; }
		
		//FQN
		public RuleCall getDerivedFTypeFQNParserRuleCall_1_0_1() { return cDerivedFTypeFQNParserRuleCall_1_0_1; }
	}
	public class FTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.Datatypes.FType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFEnumerationTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFStructTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFMapTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FType:
		//	FEnumerationType | FStructType | FMapType;
		@Override public ParserRule getRule() { return rule; }
		
		//FEnumerationType | FStructType | FMapType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FEnumerationType
		public RuleCall getFEnumerationTypeParserRuleCall_0() { return cFEnumerationTypeParserRuleCall_0; }
		
		//FStructType
		public RuleCall getFStructTypeParserRuleCall_1() { return cFStructTypeParserRuleCall_1; }
		
		//FMapType
		public RuleCall getFMapTypeParserRuleCall_2() { return cFMapTypeParserRuleCall_2; }
	}
	public class FStructTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.Datatypes.FStructType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFStructTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBaseAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cBaseFStructTypeCrossReference_3_1_0 = (CrossReference)cBaseAssignment_3_1.eContents().get(0);
		private final RuleCall cBaseFStructTypeFQNParserRuleCall_3_1_0_1 = (RuleCall)cBaseFStructTypeCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementsFFieldParserRuleCall_5_0 = (RuleCall)cElementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//FStructType:
		//	{FStructType}
		//	'struct' name=ID ('extends' base=[FStructType|FQN])?
		//	'{'
		//	elements+=FField*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{FStructType} 'struct' name=ID ('extends' base=[FStructType|FQN])? '{' elements+=FField* '}'
		public Group getGroup() { return cGroup; }
		
		//{FStructType}
		public Action getFStructTypeAction_0() { return cFStructTypeAction_0; }
		
		//'struct'
		public Keyword getStructKeyword_1() { return cStructKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('extends' base=[FStructType|FQN])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//base=[FStructType|FQN]
		public Assignment getBaseAssignment_3_1() { return cBaseAssignment_3_1; }
		
		//[FStructType|FQN]
		public CrossReference getBaseFStructTypeCrossReference_3_1_0() { return cBaseFStructTypeCrossReference_3_1_0; }
		
		//FQN
		public RuleCall getBaseFStructTypeFQNParserRuleCall_3_1_0_1() { return cBaseFStructTypeFQNParserRuleCall_3_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//elements+=FField*
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }
		
		//FField
		public RuleCall getElementsFFieldParserRuleCall_5_0() { return cElementsFFieldParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class FEnumerationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.Datatypes.FEnumerationType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFEnumerationTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnumerationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBaseAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cBaseFEnumerationTypeCrossReference_3_1_0 = (CrossReference)cBaseAssignment_3_1.eContents().get(0);
		private final RuleCall cBaseFEnumerationTypeFQNParserRuleCall_3_1_0_1 = (RuleCall)cBaseFEnumerationTypeCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cEnumeratorsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cEnumeratorsFEnumeratorParserRuleCall_5_0_0 = (RuleCall)cEnumeratorsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cEnumeratorsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cEnumeratorsFEnumeratorParserRuleCall_5_1_1_0 = (RuleCall)cEnumeratorsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//FEnumerationType:
		//	{FEnumerationType}
		//	'enumeration' name=ID ('extends' base=[FEnumerationType|FQN])?
		//	'{' (enumerators+=FEnumerator (','? enumerators+=FEnumerator)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{FEnumerationType} 'enumeration' name=ID ('extends' base=[FEnumerationType|FQN])? '{' (enumerators+=FEnumerator (','?
		//enumerators+=FEnumerator)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{FEnumerationType}
		public Action getFEnumerationTypeAction_0() { return cFEnumerationTypeAction_0; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_1() { return cEnumerationKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('extends' base=[FEnumerationType|FQN])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//base=[FEnumerationType|FQN]
		public Assignment getBaseAssignment_3_1() { return cBaseAssignment_3_1; }
		
		//[FEnumerationType|FQN]
		public CrossReference getBaseFEnumerationTypeCrossReference_3_1_0() { return cBaseFEnumerationTypeCrossReference_3_1_0; }
		
		//FQN
		public RuleCall getBaseFEnumerationTypeFQNParserRuleCall_3_1_0_1() { return cBaseFEnumerationTypeFQNParserRuleCall_3_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(enumerators+=FEnumerator (','? enumerators+=FEnumerator)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//enumerators+=FEnumerator
		public Assignment getEnumeratorsAssignment_5_0() { return cEnumeratorsAssignment_5_0; }
		
		//FEnumerator
		public RuleCall getEnumeratorsFEnumeratorParserRuleCall_5_0_0() { return cEnumeratorsFEnumeratorParserRuleCall_5_0_0; }
		
		//(','? enumerators+=FEnumerator)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','?
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//enumerators+=FEnumerator
		public Assignment getEnumeratorsAssignment_5_1_1() { return cEnumeratorsAssignment_5_1_1; }
		
		//FEnumerator
		public RuleCall getEnumeratorsFEnumeratorParserRuleCall_5_1_1_0() { return cEnumeratorsFEnumeratorParserRuleCall_5_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class FEnumeratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.Datatypes.FEnumerator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFEnumeratorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//FEnumerator:
		//	{FEnumerator} name=ID ('=' value=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{FEnumerator} name=ID ('=' value=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{FEnumerator}
		public Action getFEnumeratorAction_0() { return cFEnumeratorAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('=' value=STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
	}
	public class FMapTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.Datatypes.FMapType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFMapTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMapKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cKeyTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKeyTypeFTypeRefParserRuleCall_4_0 = (RuleCall)cKeyTypeAssignment_4.eContents().get(0);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValueTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValueTypeFTypeRefParserRuleCall_6_0 = (RuleCall)cValueTypeAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//FMapType:
		//	{FMapType}
		//	'map' name=ID '{'
		//	keyType=FTypeRef 'to' valueType=FTypeRef
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{FMapType} 'map' name=ID '{' keyType=FTypeRef 'to' valueType=FTypeRef '}'
		public Group getGroup() { return cGroup; }
		
		//{FMapType}
		public Action getFMapTypeAction_0() { return cFMapTypeAction_0; }
		
		//'map'
		public Keyword getMapKeyword_1() { return cMapKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//keyType=FTypeRef
		public Assignment getKeyTypeAssignment_4() { return cKeyTypeAssignment_4; }
		
		//FTypeRef
		public RuleCall getKeyTypeFTypeRefParserRuleCall_4_0() { return cKeyTypeFTypeRefParserRuleCall_4_0; }
		
		//'to'
		public Keyword getToKeyword_5() { return cToKeyword_5; }
		
		//valueType=FTypeRef
		public Assignment getValueTypeAssignment_6() { return cValueTypeAssignment_6; }
		
		//FTypeRef
		public RuleCall getValueTypeFTypeRefParserRuleCall_6_0() { return cValueTypeFTypeRefParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class FFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.Datatypes.FField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeFTypeRefParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cListAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cListLeftSquareBracketKeyword_1_0_0 = (Keyword)cListAssignment_1_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//FField:
		//	type=FTypeRef (list?='[' ']')? name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//type=FTypeRef (list?='[' ']')? name=ID
		public Group getGroup() { return cGroup; }
		
		//type=FTypeRef
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//FTypeRef
		public RuleCall getTypeFTypeRefParserRuleCall_0_0() { return cTypeFTypeRefParserRuleCall_0_0; }
		
		//(list?='[' ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//list?='['
		public Assignment getListAssignment_1_0() { return cListAssignment_1_0; }
		
		//'['
		public Keyword getListLeftSquareBracketKeyword_1_0_0() { return cListLeftSquareBracketKeyword_1_0_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_1() { return cRightSquareBracketKeyword_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	
	public class FBasicTypeIdElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "edu.vanderbilt.riaps.Datatypes.FBasicTypeId");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInt8EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInt8Int8Keyword_0_0 = (Keyword)cInt8EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUInt8EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUInt8UInt8Keyword_1_0 = (Keyword)cUInt8EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInt16EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInt16Int16Keyword_2_0 = (Keyword)cInt16EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cUInt16EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cUInt16UInt16Keyword_3_0 = (Keyword)cUInt16EnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cInt32EnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cInt32Int32Keyword_4_0 = (Keyword)cInt32EnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cUInt32EnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cUInt32UInt32Keyword_5_0 = (Keyword)cUInt32EnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cInt64EnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cInt64Int64Keyword_6_0 = (Keyword)cInt64EnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cUInt64EnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cUInt64UInt64Keyword_7_0 = (Keyword)cUInt64EnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cBooleanBooleanKeyword_8_0 = (Keyword)cBooleanEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cStringStringKeyword_9_0 = (Keyword)cStringEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cFloatFloatKeyword_10_0 = (Keyword)cFloatEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cDoubleDoubleKeyword_11_0 = (Keyword)cDoubleEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cCharEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cCharCharKeyword_12_0 = (Keyword)cCharEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cByteBufferEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cByteBufferByteBufferKeyword_13_0 = (Keyword)cByteBufferEnumLiteralDeclaration_13.eContents().get(0);
		
		//enum FBasicTypeId:
		//	Int8 |
		//	UInt8 |
		//	Int16 |
		//	UInt16 |
		//	Int32 |
		//	UInt32 |
		//	Int64 |
		//	UInt64 |
		//	Boolean |
		//	String |
		//	Float |
		//	Double |
		//	Char |
		//	ByteBuffer;
		public EnumRule getRule() { return rule; }
		
		//Int8 | UInt8 | Int16 | UInt16 | Int32 | UInt32 | Int64 | UInt64 | Boolean | String | Float | Double | Char | ByteBuffer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Int8
		public EnumLiteralDeclaration getInt8EnumLiteralDeclaration_0() { return cInt8EnumLiteralDeclaration_0; }
		
		//'Int8'
		public Keyword getInt8Int8Keyword_0_0() { return cInt8Int8Keyword_0_0; }
		
		//UInt8
		public EnumLiteralDeclaration getUInt8EnumLiteralDeclaration_1() { return cUInt8EnumLiteralDeclaration_1; }
		
		//'UInt8'
		public Keyword getUInt8UInt8Keyword_1_0() { return cUInt8UInt8Keyword_1_0; }
		
		//Int16
		public EnumLiteralDeclaration getInt16EnumLiteralDeclaration_2() { return cInt16EnumLiteralDeclaration_2; }
		
		//'Int16'
		public Keyword getInt16Int16Keyword_2_0() { return cInt16Int16Keyword_2_0; }
		
		//UInt16
		public EnumLiteralDeclaration getUInt16EnumLiteralDeclaration_3() { return cUInt16EnumLiteralDeclaration_3; }
		
		//'UInt16'
		public Keyword getUInt16UInt16Keyword_3_0() { return cUInt16UInt16Keyword_3_0; }
		
		//Int32
		public EnumLiteralDeclaration getInt32EnumLiteralDeclaration_4() { return cInt32EnumLiteralDeclaration_4; }
		
		//'Int32'
		public Keyword getInt32Int32Keyword_4_0() { return cInt32Int32Keyword_4_0; }
		
		//UInt32
		public EnumLiteralDeclaration getUInt32EnumLiteralDeclaration_5() { return cUInt32EnumLiteralDeclaration_5; }
		
		//'UInt32'
		public Keyword getUInt32UInt32Keyword_5_0() { return cUInt32UInt32Keyword_5_0; }
		
		//Int64
		public EnumLiteralDeclaration getInt64EnumLiteralDeclaration_6() { return cInt64EnumLiteralDeclaration_6; }
		
		//'Int64'
		public Keyword getInt64Int64Keyword_6_0() { return cInt64Int64Keyword_6_0; }
		
		//UInt64
		public EnumLiteralDeclaration getUInt64EnumLiteralDeclaration_7() { return cUInt64EnumLiteralDeclaration_7; }
		
		//'UInt64'
		public Keyword getUInt64UInt64Keyword_7_0() { return cUInt64UInt64Keyword_7_0; }
		
		//Boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_8() { return cBooleanEnumLiteralDeclaration_8; }
		
		//'Boolean'
		public Keyword getBooleanBooleanKeyword_8_0() { return cBooleanBooleanKeyword_8_0; }
		
		//String
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_9() { return cStringEnumLiteralDeclaration_9; }
		
		//'String'
		public Keyword getStringStringKeyword_9_0() { return cStringStringKeyword_9_0; }
		
		//Float
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_10() { return cFloatEnumLiteralDeclaration_10; }
		
		//'Float'
		public Keyword getFloatFloatKeyword_10_0() { return cFloatFloatKeyword_10_0; }
		
		//Double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_11() { return cDoubleEnumLiteralDeclaration_11; }
		
		//'Double'
		public Keyword getDoubleDoubleKeyword_11_0() { return cDoubleDoubleKeyword_11_0; }
		
		//Char
		public EnumLiteralDeclaration getCharEnumLiteralDeclaration_12() { return cCharEnumLiteralDeclaration_12; }
		
		//'Char'
		public Keyword getCharCharKeyword_12_0() { return cCharCharKeyword_12_0; }
		
		//ByteBuffer
		public EnumLiteralDeclaration getByteBufferEnumLiteralDeclaration_13() { return cByteBufferEnumLiteralDeclaration_13; }
		
		//'ByteBuffer'
		public Keyword getByteBufferByteBufferKeyword_13_0() { return cByteBufferByteBufferKeyword_13_0; }
	}
	
	private final ModelElements pModel;
	private final ImportElements pImport;
	private final ImportedFQNElements pImportedFQN;
	private final FQNElements pFQN;
	private final FTypeCollectionElements pFTypeCollection;
	private final FMessageElements pFMessage;
	private final FVersionElements pFVersion;
	private final FTypeRefElements pFTypeRef;
	private final FBasicTypeIdElements eFBasicTypeId;
	private final FTypeElements pFType;
	private final FStructTypeElements pFStructType;
	private final FEnumerationTypeElements pFEnumerationType;
	private final FEnumeratorElements pFEnumerator;
	private final FMapTypeElements pFMapType;
	private final FFieldElements pFField;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DatatypesGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pImport = new ImportElements();
		this.pImportedFQN = new ImportedFQNElements();
		this.pFQN = new FQNElements();
		this.pFTypeCollection = new FTypeCollectionElements();
		this.pFMessage = new FMessageElements();
		this.pFVersion = new FVersionElements();
		this.pFTypeRef = new FTypeRefElements();
		this.eFBasicTypeId = new FBasicTypeIdElements();
		this.pFType = new FTypeElements();
		this.pFStructType = new FStructTypeElements();
		this.pFEnumerationType = new FEnumerationTypeElements();
		this.pFEnumerator = new FEnumeratorElements();
		this.pFMapType = new FMapTypeElements();
		this.pFField = new FFieldElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.vanderbilt.riaps.Datatypes".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// **************************************************************
	//// model root
	//Model Mdodel:
	//	{Model}
	//	'package' name=FQN
	//	imports+=Import*
	//	typeCollections+=FTypeCollection*
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//// **************************************************************
	//// general
	////Package:
	////	'package' name=FQN
	////;
	//Import:
	//	'import' importedNamespace=ImportedFQN;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//ImportedFQN:
	//	FQN ('.' '*')?;
	public ImportedFQNElements getImportedFQNAccess() {
		return pImportedFQN;
	}
	
	public ParserRule getImportedFQNRule() {
		return getImportedFQNAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//FTypeCollection:
	//	{FTypeCollection}
	//	'types' name=ID?
	//	'{' ('version' version=FVersion)?
	//	types+=FType*
	//	'}';
	public FTypeCollectionElements getFTypeCollectionAccess() {
		return pFTypeCollection;
	}
	
	public ParserRule getFTypeCollectionRule() {
		return getFTypeCollectionAccess().getRule();
	}
	
	//FMessage:
	//	{FMessage} derived=[FStructType|FQN] name=ID ('key' key=[FField|FQN])?;
	public FMessageElements getFMessageAccess() {
		return pFMessage;
	}
	
	public ParserRule getFMessageRule() {
		return getFMessageAccess().getRule();
	}
	
	//FVersion:
	//	{FVersion}
	//	'{'
	//	'major' major=INT
	//	'minor' minor=INT
	//	'}';
	public FVersionElements getFVersionAccess() {
		return pFVersion;
	}
	
	public ParserRule getFVersionRule() {
		return getFVersionAccess().getRule();
	}
	
	//FTypeRef:
	//	predefined=FBasicTypeId | derived=[FType|FQN];
	public FTypeRefElements getFTypeRefAccess() {
		return pFTypeRef;
	}
	
	public ParserRule getFTypeRefRule() {
		return getFTypeRefAccess().getRule();
	}
	
	//enum FBasicTypeId:
	//	Int8 |
	//	UInt8 |
	//	Int16 |
	//	UInt16 |
	//	Int32 |
	//	UInt32 |
	//	Int64 |
	//	UInt64 |
	//	Boolean |
	//	String |
	//	Float |
	//	Double |
	//	Char |
	//	ByteBuffer;
	public FBasicTypeIdElements getFBasicTypeIdAccess() {
		return eFBasicTypeId;
	}
	
	public EnumRule getFBasicTypeIdRule() {
		return getFBasicTypeIdAccess().getRule();
	}
	
	//FType:
	//	FEnumerationType | FStructType | FMapType;
	public FTypeElements getFTypeAccess() {
		return pFType;
	}
	
	public ParserRule getFTypeRule() {
		return getFTypeAccess().getRule();
	}
	
	//FStructType:
	//	{FStructType}
	//	'struct' name=ID ('extends' base=[FStructType|FQN])?
	//	'{'
	//	elements+=FField*
	//	'}';
	public FStructTypeElements getFStructTypeAccess() {
		return pFStructType;
	}
	
	public ParserRule getFStructTypeRule() {
		return getFStructTypeAccess().getRule();
	}
	
	//FEnumerationType:
	//	{FEnumerationType}
	//	'enumeration' name=ID ('extends' base=[FEnumerationType|FQN])?
	//	'{' (enumerators+=FEnumerator (','? enumerators+=FEnumerator)*)?
	//	'}';
	public FEnumerationTypeElements getFEnumerationTypeAccess() {
		return pFEnumerationType;
	}
	
	public ParserRule getFEnumerationTypeRule() {
		return getFEnumerationTypeAccess().getRule();
	}
	
	//FEnumerator:
	//	{FEnumerator} name=ID ('=' value=STRING)?;
	public FEnumeratorElements getFEnumeratorAccess() {
		return pFEnumerator;
	}
	
	public ParserRule getFEnumeratorRule() {
		return getFEnumeratorAccess().getRule();
	}
	
	//FMapType:
	//	{FMapType}
	//	'map' name=ID '{'
	//	keyType=FTypeRef 'to' valueType=FTypeRef
	//	'}';
	public FMapTypeElements getFMapTypeAccess() {
		return pFMapType;
	}
	
	public ParserRule getFMapTypeRule() {
		return getFMapTypeAccess().getRule();
	}
	
	//FField:
	//	type=FTypeRef (list?='[' ']')? name=ID;
	public FFieldElements getFFieldAccess() {
		return pFField;
	}
	
	public ParserRule getFFieldRule() {
		return getFFieldAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
