/**
 * generated by Xtext 2.10.0
 */
package edu.vanderbilt.riaps.datatypes.impl;

import edu.vanderbilt.riaps.datatypes.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class DatatypesFactoryImpl extends EFactoryImpl implements DatatypesFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static DatatypesFactory init()
  {
    try
    {
      DatatypesFactory theDatatypesFactory = (DatatypesFactory)EPackage.Registry.INSTANCE.getEFactory(DatatypesPackage.eNS_URI);
      if (theDatatypesFactory != null)
      {
        return theDatatypesFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new DatatypesFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DatatypesFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case DatatypesPackage.MDODEL: return createMdodel();
      case DatatypesPackage.IMPORT: return createImport();
      case DatatypesPackage.FTYPE_COLLECTION: return createFTypeCollection();
      case DatatypesPackage.FMESSAGE: return createFMessage();
      case DatatypesPackage.FVERSION: return createFVersion();
      case DatatypesPackage.FTYPE_REF: return createFTypeRef();
      case DatatypesPackage.FTYPE: return createFType();
      case DatatypesPackage.FSTRUCT_TYPE: return createFStructType();
      case DatatypesPackage.FENUMERATION_TYPE: return createFEnumerationType();
      case DatatypesPackage.FENUMERATOR: return createFEnumerator();
      case DatatypesPackage.FMAP_TYPE: return createFMapType();
      case DatatypesPackage.FFIELD: return createFField();
      case DatatypesPackage.MODEL: return createModel();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case DatatypesPackage.FBASIC_TYPE_ID:
        return createFBasicTypeIdFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case DatatypesPackage.FBASIC_TYPE_ID:
        return convertFBasicTypeIdToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Mdodel createMdodel()
  {
    MdodelImpl mdodel = new MdodelImpl();
    return mdodel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTypeCollection createFTypeCollection()
  {
    FTypeCollectionImpl fTypeCollection = new FTypeCollectionImpl();
    return fTypeCollection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FMessage createFMessage()
  {
    FMessageImpl fMessage = new FMessageImpl();
    return fMessage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FVersion createFVersion()
  {
    FVersionImpl fVersion = new FVersionImpl();
    return fVersion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FTypeRef createFTypeRef()
  {
    FTypeRefImpl fTypeRef = new FTypeRefImpl();
    return fTypeRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FType createFType()
  {
    FTypeImpl fType = new FTypeImpl();
    return fType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FStructType createFStructType()
  {
    FStructTypeImpl fStructType = new FStructTypeImpl();
    return fStructType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FEnumerationType createFEnumerationType()
  {
    FEnumerationTypeImpl fEnumerationType = new FEnumerationTypeImpl();
    return fEnumerationType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FEnumerator createFEnumerator()
  {
    FEnumeratorImpl fEnumerator = new FEnumeratorImpl();
    return fEnumerator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FMapType createFMapType()
  {
    FMapTypeImpl fMapType = new FMapTypeImpl();
    return fMapType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FField createFField()
  {
    FFieldImpl fField = new FFieldImpl();
    return fField;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FBasicTypeId createFBasicTypeIdFromString(EDataType eDataType, String initialValue)
  {
    FBasicTypeId result = FBasicTypeId.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFBasicTypeIdToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DatatypesPackage getDatatypesPackage()
  {
    return (DatatypesPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static DatatypesPackage getPackage()
  {
    return DatatypesPackage.eINSTANCE;
  }

} //DatatypesFactoryImpl
