/**
 * generated by Xtext 2.10.0
 */
package edu.vanderbilt.riaps.datatypes.util;

import edu.vanderbilt.riaps.datatypes.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see edu.vanderbilt.riaps.datatypes.DatatypesPackage
 * @generated
 */
public class DatatypesAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static DatatypesPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DatatypesAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = DatatypesPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DatatypesSwitch<Adapter> modelSwitch =
    new DatatypesSwitch<Adapter>()
    {
      @Override
      public Adapter caseMdodel(Mdodel object)
      {
        return createMdodelAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseFTypeCollection(FTypeCollection object)
      {
        return createFTypeCollectionAdapter();
      }
      @Override
      public Adapter caseFMessage(FMessage object)
      {
        return createFMessageAdapter();
      }
      @Override
      public Adapter caseFVersion(FVersion object)
      {
        return createFVersionAdapter();
      }
      @Override
      public Adapter caseFTypeRef(FTypeRef object)
      {
        return createFTypeRefAdapter();
      }
      @Override
      public Adapter caseFType(FType object)
      {
        return createFTypeAdapter();
      }
      @Override
      public Adapter caseFStructType(FStructType object)
      {
        return createFStructTypeAdapter();
      }
      @Override
      public Adapter caseFEnumerationType(FEnumerationType object)
      {
        return createFEnumerationTypeAdapter();
      }
      @Override
      public Adapter caseFEnumerator(FEnumerator object)
      {
        return createFEnumeratorAdapter();
      }
      @Override
      public Adapter caseFMapType(FMapType object)
      {
        return createFMapTypeAdapter();
      }
      @Override
      public Adapter caseFField(FField object)
      {
        return createFFieldAdapter();
      }
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.riaps.datatypes.Mdodel <em>Mdodel</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.riaps.datatypes.Mdodel
   * @generated
   */
  public Adapter createMdodelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.riaps.datatypes.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.riaps.datatypes.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.riaps.datatypes.FTypeCollection <em>FType Collection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.riaps.datatypes.FTypeCollection
   * @generated
   */
  public Adapter createFTypeCollectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.riaps.datatypes.FMessage <em>FMessage</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.riaps.datatypes.FMessage
   * @generated
   */
  public Adapter createFMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.riaps.datatypes.FVersion <em>FVersion</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.riaps.datatypes.FVersion
   * @generated
   */
  public Adapter createFVersionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.riaps.datatypes.FTypeRef <em>FType Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.riaps.datatypes.FTypeRef
   * @generated
   */
  public Adapter createFTypeRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.riaps.datatypes.FType <em>FType</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.riaps.datatypes.FType
   * @generated
   */
  public Adapter createFTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.riaps.datatypes.FStructType <em>FStruct Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.riaps.datatypes.FStructType
   * @generated
   */
  public Adapter createFStructTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.riaps.datatypes.FEnumerationType <em>FEnumeration Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.riaps.datatypes.FEnumerationType
   * @generated
   */
  public Adapter createFEnumerationTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.riaps.datatypes.FEnumerator <em>FEnumerator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.riaps.datatypes.FEnumerator
   * @generated
   */
  public Adapter createFEnumeratorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.riaps.datatypes.FMapType <em>FMap Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.riaps.datatypes.FMapType
   * @generated
   */
  public Adapter createFMapTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.riaps.datatypes.FField <em>FField</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.riaps.datatypes.FField
   * @generated
   */
  public Adapter createFFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link edu.vanderbilt.riaps.datatypes.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see edu.vanderbilt.riaps.datatypes.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //DatatypesAdapterFactory
