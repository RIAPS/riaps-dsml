/*
 * generated by Xtext 2.10.0
 */
package edu.vanderbilt.riaps.serializer;

import com.google.inject.Inject;
import edu.vanderbilt.riaps.datatypes.DatatypesPackage;
import edu.vanderbilt.riaps.datatypes.FEnumerationType;
import edu.vanderbilt.riaps.datatypes.FEnumerator;
import edu.vanderbilt.riaps.datatypes.FField;
import edu.vanderbilt.riaps.datatypes.FMapType;
import edu.vanderbilt.riaps.datatypes.FMessage;
import edu.vanderbilt.riaps.datatypes.FStructType;
import edu.vanderbilt.riaps.datatypes.FTypeCollection;
import edu.vanderbilt.riaps.datatypes.FTypeRef;
import edu.vanderbilt.riaps.datatypes.FVersion;
import edu.vanderbilt.riaps.datatypes.Import;
import edu.vanderbilt.riaps.datatypes.Model;
import edu.vanderbilt.riaps.services.DatatypesGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DatatypesSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DatatypesGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DatatypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DatatypesPackage.FENUMERATION_TYPE:
				sequence_FEnumerationType(context, (FEnumerationType) semanticObject); 
				return; 
			case DatatypesPackage.FENUMERATOR:
				sequence_FEnumerator(context, (FEnumerator) semanticObject); 
				return; 
			case DatatypesPackage.FFIELD:
				sequence_FField(context, (FField) semanticObject); 
				return; 
			case DatatypesPackage.FMAP_TYPE:
				sequence_FMapType(context, (FMapType) semanticObject); 
				return; 
			case DatatypesPackage.FMESSAGE:
				sequence_FMessage(context, (FMessage) semanticObject); 
				return; 
			case DatatypesPackage.FSTRUCT_TYPE:
				sequence_FStructType(context, (FStructType) semanticObject); 
				return; 
			case DatatypesPackage.FTYPE_COLLECTION:
				sequence_FTypeCollection(context, (FTypeCollection) semanticObject); 
				return; 
			case DatatypesPackage.FTYPE_REF:
				sequence_FTypeRef(context, (FTypeRef) semanticObject); 
				return; 
			case DatatypesPackage.FVERSION:
				sequence_FVersion(context, (FVersion) semanticObject); 
				return; 
			case DatatypesPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case DatatypesPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     FType returns FEnumerationType
	 *     FEnumerationType returns FEnumerationType
	 *
	 * Constraint:
	 *     (name=ID base=[FEnumerationType|FQN]? (enumerators+=FEnumerator enumerators+=FEnumerator*)?)
	 */
	protected void sequence_FEnumerationType(ISerializationContext context, FEnumerationType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FEnumerator returns FEnumerator
	 *
	 * Constraint:
	 *     (name=ID value=STRING?)
	 */
	protected void sequence_FEnumerator(ISerializationContext context, FEnumerator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FField returns FField
	 *
	 * Constraint:
	 *     (type=FTypeRef list?='['? name=ID)
	 */
	protected void sequence_FField(ISerializationContext context, FField semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FType returns FMapType
	 *     FMapType returns FMapType
	 *
	 * Constraint:
	 *     (name=ID keyType=FTypeRef valueType=FTypeRef)
	 */
	protected void sequence_FMapType(ISerializationContext context, FMapType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DatatypesPackage.Literals.FTYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DatatypesPackage.Literals.FTYPE__NAME));
			if (transientValues.isValueTransient(semanticObject, DatatypesPackage.Literals.FMAP_TYPE__KEY_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DatatypesPackage.Literals.FMAP_TYPE__KEY_TYPE));
			if (transientValues.isValueTransient(semanticObject, DatatypesPackage.Literals.FMAP_TYPE__VALUE_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DatatypesPackage.Literals.FMAP_TYPE__VALUE_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFMapTypeAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFMapTypeAccess().getKeyTypeFTypeRefParserRuleCall_4_0(), semanticObject.getKeyType());
		feeder.accept(grammarAccess.getFMapTypeAccess().getValueTypeFTypeRefParserRuleCall_6_0(), semanticObject.getValueType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FMessage returns FMessage
	 *
	 * Constraint:
	 *     (derived=[FStructType|FQN] name=ID key=[FField|FQN]?)
	 */
	protected void sequence_FMessage(ISerializationContext context, FMessage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FType returns FStructType
	 *     FStructType returns FStructType
	 *
	 * Constraint:
	 *     (name=ID base=[FStructType|FQN]? elements+=FField*)
	 */
	protected void sequence_FStructType(ISerializationContext context, FStructType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FTypeCollection returns FTypeCollection
	 *
	 * Constraint:
	 *     (name=ID? version=FVersion? types+=FType*)
	 */
	protected void sequence_FTypeCollection(ISerializationContext context, FTypeCollection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FTypeRef returns FTypeRef
	 *
	 * Constraint:
	 *     (predefined=FBasicTypeId | derived=[FType|FQN])
	 */
	protected void sequence_FTypeRef(ISerializationContext context, FTypeRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FVersion returns FVersion
	 *
	 * Constraint:
	 *     (major=INT minor=INT)
	 */
	protected void sequence_FVersion(ISerializationContext context, FVersion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DatatypesPackage.Literals.FVERSION__MAJOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DatatypesPackage.Literals.FVERSION__MAJOR));
			if (transientValues.isValueTransient(semanticObject, DatatypesPackage.Literals.FVERSION__MINOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DatatypesPackage.Literals.FVERSION__MINOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFVersionAccess().getMajorINTTerminalRuleCall_3_0(), semanticObject.getMajor());
		feeder.accept(grammarAccess.getFVersionAccess().getMinorINTTerminalRuleCall_5_0(), semanticObject.getMinor());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     importedNamespace=ImportedFQN
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DatatypesPackage.Literals.IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DatatypesPackage.Literals.IMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportAccess().getImportedNamespaceImportedFQNParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (name=FQN imports+=Import* typeCollections+=FTypeCollection*)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
