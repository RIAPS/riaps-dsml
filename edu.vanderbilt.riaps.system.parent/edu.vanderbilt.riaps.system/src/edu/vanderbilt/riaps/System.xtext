grammar edu.vanderbilt.riaps.System with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.vanderbilt.edu/riaps/App" as App
generate system "http://www.vanderbilt.edu/riaps/System"


//This is the main model rule
Model returns Mdodel:
	{Model}
	'package' name=FQN (';')?
	(imports+=Import)*
	(collections+=Collection)*;
	
Import:
	'import' (importedNamespace=ImportedFQN) (';')?;

ImportedFQN:
	FQN ('.' '*')?;

FQN:
	ID ('.' ID)*;	
	
Collection:
	NodeType
	|KnownNodes
	|AppDeployment
;
terminal INT returns ecore::EInt:
	'0'..'9' ('0'..'9' | '_')*;

terminal DECIMAL:
	INT
	(('e' | 'E') ('+' | '-')? INT)?
	(('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	
StringDefault:
	value=STRING;

NumberDefault:
	value=Number;

BoolDefault:
	value=BOOL;
	
terminal BOOL:
	'true' | 'false';
	
Number hidden():
	(INT | DECIMAL) ('.' (INT | DECIMAL))?;
	

//Node type captures a class of nodes. Specific nodes of the class can be added at runtime
//enabling dynamic deployment.
NodeType returns NodeType:
	{NodeType}
	'nodeType' (name=ID)
	'{'
		//(provision+=Provision)+
		(deviceSupport+=DeviceSupported)*
		(memory=MemoryProvision)?
		(storage=StorageProvision)?		
	'}';

Provision:
	DeviceSupported
	|MemoryProvision
	|StorageProvision
;

//Devices can be specifically tagged read hierarchically from left to right
DeviceSupported:
	'device' device=[App::DeviceType] ('tag' tag=DeviceTagSequence)?(';')?
;


DeviceTagSequence:
	tag+=DeviceTag ('.' tag+=DeviceTag)*
;	

DeviceTag:
	name=ID
;
	
MemoryProvision:
	'mem' value=INT unit = MemoryUnits (';')?
;

/*
 * Rule to specify storage provision.
 */
StorageProvision:
	'space' storage = INT unit = MemoryUnits (';')?;
	
/*
 * Rule that defines different supported memory units. 
 */
MemoryUnits:
		//kb?='KB' 
	//| 	
	mb?='MB' 
	//| 	gb?="GB"
	;
	
	
KnownNodes:
	'host' (name=ID) (':' kind=[NodeType|FQN])?
	'{'
		(deviceSupport+=DeviceSupported)*
		(memory=MemoryProvision)?
		(storage=StorageProvision)?
		(netinterface+=NetworkInterface)*
	'}'
;


IP returns  ecore::EString:   (INT '.' INT '.' INT '.' INT)	;



NetworkInterface:
	'net' name=ID 'address' ip=IP 	(';')?
;

AppDeployment:
  'app' app=[App::Application|FQN] '{'
    (actorDeployments += ActorDeployment)*
 '}'
;

ActorDeployment:
  'on' location=Location actors+=ActorAssignment (',' actors+=ActorAssignment)* (';')?
;

ActorAssignment:
 actor=[App::Actor|FQN] ('(' formals+=ActorFormalAssignment (',' formals+=ActorFormalAssignment)* ')')?	
;

ActorFormalAssignment returns ActorFormalAssignment :
	{ActorFormalAssignment} argName=[App::ActorFormal|FQN] '=' argValue=ActualValue;

ActualValue returns ActualValue:
	{ActualValue} (stringdefault=StringDefault | numberdefault=NumberDefault | boolDefault=BoolDefault);
	


Location:
	LocationNodeTypes
	|LocationNodes
;

LocationNodeTypes:
	(all?='all'|(exactly?='exactly' lb=INT)|(lb=INT (atmost?='to' up=INT)? )) target+=[NodeType|FQN] (',' target+=[NodeType|FQN])* 
;

LocationNodes:
	hosts+=[KnownNodes|FQN](',' hosts+=[KnownNodes|FQN])*
;