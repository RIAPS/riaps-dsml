/*
 * generated by Xtext 2.10.0
 */
package edu.vanderbilt.riaps.validation

import org.eclipse.xtext.validation.Check

import java.util.regex.Pattern
import edu.vanderbilt.riaps.system.SystemPackage
import edu.vanderbilt.riaps.system.NetworkInterface
import edu.vanderbilt.riaps.Console
import edu.vanderbilt.riaps.app.NumberDefault
import edu.vanderbilt.riaps.system.ActorFormalAssignment
import edu.vanderbilt.riaps.system.ActualValue
import edu.vanderbilt.riaps.app.StringDefault
import edu.vanderbilt.riaps.app.FormalDefault
import edu.vanderbilt.riaps.app.BoolDefault

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class SystemValidator extends AbstractSystemValidator {

	private static final Pattern PATTERN = Pattern.compile(
		"^(([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.){3}([01]?\\d\\d?|2[0-4]\\d|25[0-5])$");

	@Check
	def checkCorrectAddress(NetworkInterface net) {
		val s = net.ip
		// Console.instance.log(java.util.logging.Level.INFO, "Ipaddress is " + s);
		// val isWhitespace = s.matches("^\\s*$");
		if (!PATTERN.matcher(s as String).matches)
			error('Address is not a valid IP Address', null)
//		if (isWhitespace) {
//			error('Ip Address cannot contain spaces',null)
//			Console.instance.log(java.util.logging.Level.INFO, "Ip Address cannot contain space");
//		}
	}

	@Check
	def checkActorFormalAssignment(ActorFormalAssignment afa) {
		var ActualValue av = afa.getArgValue();
		var FormalDefault fd = afa.getArgName().getArgDefault();
		if (fd !== null) {
			if (fd instanceof StringDefault) {
				if ((av.stringdefault ==null)) {
					error(
						'while the actual value was declared as String in Actor Definition. You are trying to assign a non-string parameter',
						null)
				}
			} else if (fd instanceof BoolDefault) {
				if (av.boolDefault ==null) {
					error(
						'while the actual value was declared as Bool in Actor Definition. You are trying to assign a non-Bool parameter',
						null)
				}
			} else if (fd instanceof NumberDefault) {
				if (av.numberdefault ==null) {
					error(
						'while the actual value was declared as Number in Actor Definition. You are trying to assign a non-Number parameter',
						null)
				}

			}
		}
	}

}
